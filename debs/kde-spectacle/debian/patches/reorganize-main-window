diff -Nur kde-spectacle.orig/po/fi/spectacle.po kde-spectacle.change/po/fi/spectacle.po
--- kde-spectacle.orig/po/fi/spectacle.po	2022-12-16 12:53:47.087295852 +0200
+++ kde-spectacle.change/po/fi/spectacle.po	2022-12-16 15:10:26.737411444 +0200
@@ -368,7 +368,7 @@
 #: src/Gui/KSWidget.cpp:80 src/Gui/SettingsDialog/GeneralOptions.ui:130
 #, kde-format
 msgid "Rectangular Region"
-msgstr "Suorakulmainen alue"
+msgstr "Valitse alue"
 
 #: src/Gui/KSWidget.cpp:83
 #, kde-format
diff -Nur kde-spectacle.orig/src/Gui/KSMainWindow.cpp kde-spectacle.change/src/Gui/KSMainWindow.cpp
--- kde-spectacle.orig/src/Gui/KSMainWindow.cpp	2022-12-16 12:53:47.083295853 +0200
+++ kde-spectacle.change/src/Gui/KSMainWindow.cpp	2022-12-16 16:01:59.100754227 +0200
@@ -66,9 +66,7 @@
     mKSWidget(new KSWidget(theGrabModes, this)),
     mDivider(new QFrame(this)),
     mDialogButtonBox(new QDialogButtonBox(this)),
-    mConfigureButton(new QToolButton(this)),
     mToolsButton(new QPushButton(this)),
-    mSendToButton(new QPushButton(this)),
     mClipboardButton(new QToolButton(this)),
     mSaveButton(new QToolButton(this)),
     mSaveMenu(new QMenu(this)),
@@ -147,12 +145,6 @@
     // the Button Bar
 
 
-    mConfigureButton->setDefaultAction(KStandardAction::preferences(this, SLOT(showPreferencesDialog()), this));
-    mConfigureButton->setText(i18n("Configure..."));
-    mConfigureButton->setToolTip(i18n("Change Spectacle's settings."));
-    mConfigureButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
-    mDialogButtonBox->addButton(mConfigureButton, QDialogButtonBox::ResetRole);
-
 #ifdef KIMAGEANNOTATOR_FOUND
     mAnnotateButton->setText(i18n("Annotate"));
     mAnnotateButton->setToolTip(i18n("Add annotation to the screenshot"));
@@ -170,12 +162,12 @@
         mAnnotatorActive = !mAnnotatorActive;
 
         mToolsButton->setEnabled(!mAnnotatorActive);
-        mSendToButton->setEnabled(!mAnnotatorActive);
+        //mSendToButton->setEnabled(!mAnnotatorActive);
         mClipboardButton->setEnabled(!mAnnotatorActive);
         mSaveButton->setEnabled(!mAnnotatorActive);
     });
 
-    mDialogButtonBox->addButton(mAnnotateButton, QDialogButtonBox::ActionRole);
+    mDialogButtonBox->addButton(mAnnotateButton, QDialogButtonBox::ResetRole);
 #endif
 
     KGuiItem::assign(mToolsButton, KGuiItem(i18n("Tools")));
@@ -235,12 +227,19 @@
     layout->addWidget(mDialogButtonBox);
     mMessageWidget->hide();
 
+    /*mConfigureButton->setDefaultAction(KStandardAction::preferences(this, SLOT(showPreferencesDialog()), this));
+    mConfigureButton->setText(i18n("Configure..."));
+    mConfigureButton->setToolTip(i18n("Change Spectacle's settings."));
+    mConfigureButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);*/
+    mToolsMenu->addAction(KStandardAction::preferences(this, SLOT(showPreferencesDialog()), this)); //(mConfigureButton, QDialogButtonBox::ResetRole);
+    
     // populate our send-to actions
     mExportMenu->setTitle(i18n("Export"));
     mExportMenu->setIcon(QIcon::fromTheme(QStringLiteral("document-share")));
     mToolsMenu->addMenu(mExportMenu);
 
     connect(mExportMenu, &ExportMenu::imageShared, this, &KSMainWindow::showImageSharedFeedback);
+
     
     // the help menu
     KHelpMenu *helpMenu = new KHelpMenu(this, KAboutData::applicationData(), true);
diff -Nur kde-spectacle.orig/src/Gui/KSMainWindow.h kde-spectacle.change/src/Gui/KSMainWindow.h
--- kde-spectacle.orig/src/Gui/KSMainWindow.h	2022-12-16 12:53:47.079295857 +0200
+++ kde-spectacle.change/src/Gui/KSMainWindow.h	2022-12-16 16:02:09.156752017 +0200
@@ -105,9 +105,8 @@
     KSWidget         *mKSWidget;
     QFrame           *mDivider;
     QDialogButtonBox *mDialogButtonBox;
-    QToolButton      *mConfigureButton;
+//    QToolButton      *mConfigureButton;
     QPushButton      *mToolsButton;
-    QPushButton      *mSendToButton;
     QToolButton      *mClipboardButton;
     QToolButton      *mSaveButton;
     QMenu            *mSaveMenu;
diff -Nur kde-spectacle.orig/src/Gui/KSWidget.cpp kde-spectacle.change/src/Gui/KSWidget.cpp
--- kde-spectacle.orig/src/Gui/KSWidget.cpp	2022-12-16 12:53:47.083295853 +0200
+++ kde-spectacle.change/src/Gui/KSWidget.cpp	2022-12-17 16:20:05.074777828 +0200
@@ -29,11 +29,15 @@
 
 #include <QAction>
 #include <QApplication>
+#include <QButtonGroup>
 #include <QCheckBox>
 #include <QComboBox>
 #include <QFormLayout>
 #include <QGridLayout>
 #include <QLabel>
+#include <QMenu>
+#include <QRadioButton>
+#include <QPushButton>
 #include <QShortcut>
 #include <QStackedLayout>
 
@@ -62,7 +66,8 @@
 
     // the capture mode options first
     mCaptureModeLabel = new QLabel(i18n("<b>Capture Mode</b>"), this);
-    mCaptureArea = new QComboBox(this);
+    mCaptureAreaGroup = new QButtonGroup(this);
+    QRadioButton *b0=nullptr, *b1=nullptr, *b2=nullptr, *b3=nullptr, *b4=nullptr, *b5=nullptr;
 
     if (theGrabModes.testFlag(Platform::GrabMode::AllScreens)) {
 
@@ -70,31 +75,40 @@
                 ? i18n("Full Screen")
                 : i18n("Full Screen (All Monitors)");
 
-        mCaptureArea->insertItem(0, lFullScreenLabel, Spectacle::CaptureMode::AllScreens);
+        mCaptureAreaGroup->addButton(b0 = new QRadioButton(lFullScreenLabel), 0);
+        b0->setProperty("selected", Spectacle::CaptureMode::AllScreens);
     }
     if (theGrabModes.testFlag(Platform::GrabMode::AllScreensScaled) &&  QApplication::screens().count() > 1) {
         QString lFullScreenLabel = i18n("Full Screen (All Monitors, scaled)");
-        mCaptureArea->insertItem(1, lFullScreenLabel, Spectacle::CaptureMode::AllScreensScaled);
+        mCaptureAreaGroup->addButton(b1 = new QRadioButton(lFullScreenLabel), 1);
+        b1->setProperty("selected", Spectacle::CaptureMode::AllScreensScaled);
     }
     if (theGrabModes.testFlag(Platform::GrabMode::PerScreenImageNative)) {
-        mCaptureArea->insertItem(2, i18n("Rectangular Region"), Spectacle::CaptureMode::RectangularRegion);
+        mCaptureAreaGroup->addButton(b2 = new QRadioButton(i18n("Rectangular Region")), 2);
+        b2->setProperty("selected", Spectacle::CaptureMode::RectangularRegion);
     }
     if (theGrabModes.testFlag(Platform::GrabMode::CurrentScreen)) {
-        mCaptureArea->insertItem(3, i18n("Current Screen"), Spectacle::CaptureMode::CurrentScreen);
+        mCaptureAreaGroup->addButton(b3 = new QRadioButton(i18n("Current Screen")), 3);
+        b3->setProperty("selected", Spectacle::CaptureMode::CurrentScreen);
     }
     if (theGrabModes.testFlag(Platform::GrabMode::ActiveWindow)) {
-        mCaptureArea->insertItem(4, i18n("Active Window"), Spectacle::CaptureMode::ActiveWindow);
+        mCaptureAreaGroup->addButton(b4 = new QRadioButton(i18n("Active Window")), 4);
+        b4->setProperty("selected", Spectacle::CaptureMode::ActiveWindow);
     }
     if (theGrabModes.testFlag(Platform::GrabMode::WindowUnderCursor)) {
-        mCaptureArea->insertItem(5, i18n("Window Under Cursor"), Spectacle::CaptureMode::WindowUnderCursor);
+        mCaptureAreaGroup->addButton(b5 = new QRadioButton(i18n("Window Under Cursor")), 5);
+        b5->setProperty("selected", Spectacle::CaptureMode::WindowUnderCursor);
     }
     if (theGrabModes.testFlag(Platform::GrabMode::TransientWithParent)) {
         mTransientWithParentAvailable = true;
     }
-    mCaptureArea->setMinimumWidth(240);
-    mCaptureArea->setObjectName(QStringLiteral("kcfg_captureMode"));
-    mCaptureArea->setProperty("kcfg_property", QByteArray("currentData"));
-    connect(mCaptureArea, qOverload<int>(&QComboBox::currentIndexChanged), this, &KSWidget::captureModeChanged);
+    //mCaptureArea->setMinimumWidth(240);
+    //mCaptureArea->setObjectName(QStringLiteral("kcfg_captureMode"));
+    //mCaptureArea->setProperty("kcfg_property", QByteArray("currentData"));
+    connect(mCaptureAreaGroup, &QButtonGroup::idClicked, this, &KSWidget::captureModeChanged);
+    //connect(mCaptureArea, qOverload<int>(&QComboBox::currentIndexChanged), this, &KSWidget::captureModeChanged);
+
+    
 
     mDelayMsec = new SmartSpinBox(this);
     mDelayMsec->setDecimals(1);
@@ -115,39 +129,56 @@
     mDelayLayout->addWidget(mCaptureOnClick);
 
     mCaptureModeForm = new QFormLayout;
-    mCaptureModeForm->addRow(i18n("Area:"), mCaptureArea);
+    if(b0) mCaptureModeForm->addRow(b0);
+    if(b1) mCaptureModeForm->addRow(b1);
+    if(b2) mCaptureModeForm->addRow(b2);
+    if(b3) mCaptureModeForm->addRow(b3);
+    //if(b4) mCaptureModeForm->addRow(b4);  // seems to be broken on gnome
+    if(b5) mCaptureModeForm->addRow(b5);
     mCaptureModeForm->addRow(i18n("Delay:"), mDelayLayout);
     mCaptureModeForm->setContentsMargins(24, 0, 0, 0);
 
     // options (mouse pointer, window decorations, quit after saving or copying)
-    mContentOptionsLabel = new QLabel(this);
-    mContentOptionsLabel->setText(i18n("<b>Options</b>"));
+    //mContentOptionsLabel = new QLabel(this);
+    //mContentOptionsLabel->setText(i18n("<b>Options</b>"));
 
-    mMousePointer = new QCheckBox(i18n("Include mouse pointer"), this);
+    mMousePointer = new QAction(i18n("Include mouse pointer"), this);
     mMousePointer->setToolTip(i18n("Show the mouse cursor in the screenshot image"));
     mMousePointer->setObjectName(QStringLiteral("kcfg_includePointer"));
+    mMousePointer->setCheckable(true);
+    mMousePointer->setChecked(Settings::includePointer());
+    connect(mMousePointer, &QAction::toggled, &Settings::setIncludePointer);
 
-    mWindowDecorations = new QCheckBox(i18n("Include window titlebar and borders"), this);
+    mWindowDecorations = new QAction(i18n("Include window titlebar and borders"), this);
     mWindowDecorations->setToolTip(i18n("Show the window title bar, the minimize/maximize/close buttons, and the window border"));
     mWindowDecorations->setEnabled(false);
     mWindowDecorations->setObjectName(QStringLiteral("kcfg_includeDecorations"));
+    mWindowDecorations->setCheckable(true);
+    mWindowDecorations->setChecked(Settings::includeDecorations());
+    connect(mWindowDecorations, &QAction::toggled, &Settings::includeDecorations);
 
-    mCaptureTransientOnly = new QCheckBox(i18n("Capture the current pop-up only"), this);
+    mCaptureTransientOnly = new QAction(i18n("Capture the current pop-up only"), this);
     mCaptureTransientOnly->setToolTip(i18n("Capture only the current pop-up window (like a menu, tooltip etc).\n"
                                            "If disabled, the pop-up is captured along with the parent window"));
     mCaptureTransientOnly->setEnabled(false);
     mCaptureTransientOnly->setObjectName(QStringLiteral("kcfg_transientOnly"));
+    mCaptureTransientOnly->setCheckable(true);
+    mCaptureTransientOnly->setChecked(Settings::transientOnly());
+    connect(mCaptureTransientOnly, &QAction::toggled, &Settings::setTransientOnly);
 
-    mQuitAfterSaveOrCopy = new QCheckBox(i18n("Quit after manual Save or Copy"), this);
+    mQuitAfterSaveOrCopy = new QAction(i18n("Quit after manual Save or Copy"), this);
     mQuitAfterSaveOrCopy->setToolTip(i18n("Quit Spectacle after manually saving or copying the image"));
     mQuitAfterSaveOrCopy->setObjectName(QStringLiteral("kcfg_quitAfterSaveCopyExport"));
+    mQuitAfterSaveOrCopy->setCheckable(true);
+    mQuitAfterSaveOrCopy->setChecked(Settings::quitAfterSaveCopyExport());
+    connect(mQuitAfterSaveOrCopy, &QAction::toggled, &Settings::setQuitAfterSaveCopyExport);
 
-    mContentOptionsForm = new QVBoxLayout;
+    /*mContentOptionsForm = new QVBoxLayout;
     mContentOptionsForm->addWidget(mMousePointer);
     mContentOptionsForm->addWidget(mWindowDecorations);
     mContentOptionsForm->addWidget(mCaptureTransientOnly);
     mContentOptionsForm->addWidget(mQuitAfterSaveOrCopy);
-    mContentOptionsForm->setContentsMargins(24, 0, 0, 0);
+    mContentOptionsForm->setContentsMargins(24, 0, 0, 0);*/
 
     mTakeNewScreenshotAction = new QAction(QIcon::fromTheme(QStringLiteral("spectacle")), i18n("Take a New Screenshot"), this);
     mTakeNewScreenshotAction->setShortcut(QKeySequence::New);
@@ -162,6 +193,7 @@
 
     // the take a new screenshot button
     mTakeScreenshotButton = new ProgressButton(this);
+    mTakeScreenshotButton->setIconSize(QSize(100, 100));
     mTakeScreenshotButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
     mTakeScreenshotButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
     setButtonState(State::TakeNewScreenshot);
@@ -173,10 +205,22 @@
     mRightLayout->addWidget(mCaptureModeLabel);
     mRightLayout->addLayout(mCaptureModeForm);
     mRightLayout->addStretch(1);
-    mRightLayout->addWidget(mContentOptionsLabel);
-    mRightLayout->addLayout(mContentOptionsForm);
+    
+    QString optlabel=i18n("<b>Options</b>");
+    optlabel.remove(0,3);
+    optlabel.chop(4);
+    QPushButton *optb=new QPushButton(optlabel);
+    QMenu *optmenu=new QMenu();
+    optmenu->addAction(mMousePointer);
+    optmenu->addAction(mWindowDecorations);
+    optmenu->addAction(mQuitAfterSaveOrCopy);
+    optmenu->addAction(mCaptureTransientOnly);
+    optb->setMenu(optmenu);
+    //mRightLayout->addLayout(mContentOptionsForm);
     mRightLayout->addStretch(10);
     mRightLayout->addWidget(mTakeScreenshotButton, 1, Qt::AlignHCenter);
+    mRightLayout->addStretch(10);
+    mRightLayout->addWidget(optb, 1, Qt::AlignHCenter);
     mRightLayout->setContentsMargins(10, 0, 0, 10);
 
     mMainLayout = new QGridLayout();
@@ -186,8 +230,23 @@
     mMainLayout->setColumnMinimumWidth(0, 320);
     mMainLayout->setColumnMinimumWidth(1, 320);
 
-    int index = mCaptureArea->findData(Settings::captureMode());
-    mCaptureArea->setCurrentIndex(index >= 0 ? index : 0);
+    QList<QRadioButton*> buttons;
+    buttons.append(b0);
+    buttons.append(b1);
+    buttons.append(b2);
+    buttons.append(b3);
+    buttons.append(b4);
+    buttons.append(b5);
+    int index=0;
+    for(int i=0;i<buttons.length();i++)
+    {
+        if(buttons[i] && buttons[i]->property("selected").toInt()==Settings::captureMode())
+        {
+            index=i;
+        }
+    }
+    
+    mCaptureAreaGroup->button(index >= 0 ? index : 0)->click();
     auto mConfigManager = new KConfigDialogManager(this, Settings::self());
     connect(mConfigManager, &KConfigDialogManager::widgetModified, mConfigManager, &KConfigDialogManager::updateSettings);
 
@@ -242,7 +301,8 @@
 void KSWidget::newScreenshotClicked()
 {
     int lDelay = mCaptureOnClick->isChecked() ? -1 : (mDelayMsec->value() * 1000);
-    auto lMode = static_cast<Spectacle::CaptureMode>(mCaptureArea->currentData().toInt());
+    auto lMode = static_cast<Spectacle::CaptureMode>(mCaptureAreaGroup->checkedButton()->property("selected").toInt());
+    //qDebug() <<  static_cast<Spectacle::CaptureMode>(mCaptureArea->currentData().toInt());
     if (mTransientWithParentAvailable &&
         lMode == Spectacle::CaptureMode::WindowUnderCursor &&
         !(mCaptureTransientOnly->isChecked())) {
@@ -263,7 +323,9 @@
 
 void KSWidget::captureModeChanged(int theIndex)
 {
-    Spectacle::CaptureMode captureMode = static_cast<Spectacle::CaptureMode>(mCaptureArea->itemData(theIndex).toInt());
+    Spectacle::CaptureMode captureMode = static_cast<Spectacle::CaptureMode>(mCaptureAreaGroup->button(theIndex)->property("selected").toInt());
+    Settings::setCaptureMode(captureMode);
+
     switch(captureMode) {
     case Spectacle::CaptureMode::WindowUnderCursor:
         mWindowDecorations->setEnabled(true);
diff -Nur kde-spectacle.orig/src/Gui/KSWidget.h kde-spectacle.change/src/Gui/KSWidget.h
--- kde-spectacle.orig/src/Gui/KSWidget.h	2022-12-16 12:53:47.079295857 +0200
+++ kde-spectacle.change/src/Gui/KSWidget.h	2022-12-17 15:55:40.301122766 +0200
@@ -29,6 +29,7 @@
 #include "Config.h"
 
 class QAction;
+class QButtonGroup;
 class QGridLayout;
 class QHBoxLayout;
 class QVBoxLayout;
@@ -96,18 +97,19 @@
     QHBoxLayout   *mDelayLayout                  { nullptr };
     QVBoxLayout   *mRightLayout                  { nullptr };
     QFormLayout   *mCaptureModeForm              { nullptr };
-    QVBoxLayout   *mContentOptionsForm           { nullptr };
+    //QVBoxLayout   *mContentOptionsForm           { nullptr };
     KSImageWidget *mImageWidget                  { nullptr };
     ProgressButton*mTakeScreenshotButton;
-    QComboBox     *mCaptureArea                  { nullptr };
+    QButtonGroup  *mCaptureAreaGroup             { nullptr };
+    //QComboBox     *mCaptureArea                  { nullptr };
     SmartSpinBox  *mDelayMsec                    { nullptr };
     QCheckBox     *mCaptureOnClick               { nullptr };
-    QCheckBox     *mMousePointer                 { nullptr };
-    QCheckBox     *mWindowDecorations            { nullptr };
-    QCheckBox     *mCaptureTransientOnly         { nullptr };
-    QCheckBox     *mQuitAfterSaveOrCopy          { nullptr };
+    QAction       *mMousePointer                 { nullptr };
+    QAction       *mWindowDecorations            { nullptr };
+    QAction       *mCaptureTransientOnly         { nullptr };
+    QAction       *mQuitAfterSaveOrCopy          { nullptr };
     QLabel        *mCaptureModeLabel             { nullptr };
-    QLabel        *mContentOptionsLabel          { nullptr };
+    //QLabel        *mContentOptionsLabel          { nullptr };
     bool           mTransientWithParentAvailable { false };
     QAction       *mTakeNewScreenshotAction;
     QAction       *mCancelAction;
