diff -ruN cups-filters/utils/cups-browsed.c cups-filters/utils/cups-browsed.c
--- cups-filters/utils/cups-browsed.c	2023-03-28 13:06:25.000000000 +0300
+++ cups-filters/utils/cups-browsed.c	2023-03-28 13:07:46.147111639 +0300
@@ -7660,8 +7660,9 @@
   ipp_t         *request;
   time_t        current_time;
   int           i, ap_remote_queue_id_line_inserted,
-                want_raw, num_cluster_printers = 0;
-  char          *disabled_str;
+                new_cupsfilter_line_inserted, want_raw,
+                num_cluster_printers = 0;
+  char          *disabled_str, *ptr, *prefix;
   char          *ppdfile, *ifscript;
   int           fd = 0;  /* Script file descriptor */
   char          tempfile[1024];  /* Temporary file */
@@ -7694,6 +7695,10 @@
   char          *default_pagesize = NULL;
   const char    *default_color = NULL;
   int           cups_queues_updated = 0;
+  int           pass_through_ppd = 0;
+  char          *remote_cups_queue;
+  http_t        *remote_http;
+
 
   /* Create dummy entry to point slaves at when their master is about to
      get removed now (if we point them to NULL, we would try to remove
@@ -8507,68 +8512,37 @@
 	     the PPD's NickName, so that automatic PPD updating by the
 	     distribution's package installation/update infrastructure
 	     is suppressed. */
-	  /* Generating the ppd file for the remote cups queue */
-	  if (p->prattrs == NULL) {
-	    p->prattrs = get_printer_attributes(p->uri, NULL, 0, NULL, 0, 1);
-	    debug_log_out(get_printer_attributes_log);
-	  }
-	  if (p->prattrs == NULL) {
-	    debug_printf("get-printer-attributes IPP call failed on printer %s (%s).\n",
-			 p->queue_name, p->uri);
-	    goto cannot_create;
-	  }
-	  num_cluster_printers = 0;
-	  for (s = (remote_printer_t *)cupsArrayFirst(remote_printers);
-	       s; s = (remote_printer_t *)cupsArrayNext(remote_printers)) {
-	    if (!strcmp(s->queue_name, p->queue_name)) {
-	      if (s->status == STATUS_DISAPPEARED ||
-		  s->status == STATUS_UNCONFIRMED ||
-		  s->status == STATUS_TO_BE_RELEASED )
-		continue;
-	      num_cluster_printers++;
-	    }
-	  }
-	  if (num_cluster_printers == 1) {
-	    printer_attributes = p->prattrs;
-	    conflicts = NULL;
-	    default_pagesize = NULL;
-	    default_color = NULL;
-	    make_model = p->make_model;
-	    pdl = p->pdl;
-	    color = p->color;
-	    duplex = p->duplex;
-	    sizes = NULL;
-	  } else {
-	    make_model = (char*)malloc(sizeof(char)*256);
-	    printer_attributes = get_cluster_attributes(p->queue_name);
-	    if((attr = ippFindAttribute(printer_attributes,
-					"printer-make-and-model",
-					IPP_TAG_TEXT)) != NULL)
-	      strncpy(make_model, ippGetString(attr, 0, NULL),
-		      sizeof(make_model) - 1);
-	    color = 0;
-	    duplex = 0;
-	    for (r = (remote_printer_t *)cupsArrayFirst(remote_printers);
-		 r; r = (remote_printer_t *)cupsArrayNext(remote_printers)) {
-	      if (!strcmp(p->queue_name, r->queue_name)) {
-		if (r->color == 1)
-		  color = 1;
-		if (r->duplex == 1)
-		  duplex = 1;
-	      }
-	    }
-	    default_pagesize = (char *)malloc(sizeof(char)*32);
-	    debug_printf("Generated Merged Attributes for local queue %s\n",
-			 p->queue_name);
-	    conflicts = generate_cluster_conflicts(p->queue_name,
-						   printer_attributes);
-	    debug_printf("Generated Constraints for queue %s\n",p->queue_name);
-	    sizes = get_cluster_sizes(p->queue_name);
-	    get_cluster_default_attributes(&printer_attributes, p->queue_name,
-					   default_pagesize,&default_color);
-	    debug_printf("Generated Default Attributes for local queue %s\n",
-			 p->queue_name);
-	  }
+	  if (p->netprinter == 0)
+	    remote_cups_queue = strtok(p->queue_name,"@");
+	  remote_http = httpConnectEncryptShortTimeout(p->ip ? p->ip : p->host,
+            p->port ? p->port : ippPort(), cupsEncryption());
+	  if (remote_http == NULL) {
+	    debug_printf("Could not connect to the server %s:%d for %s!\n",
+	      p->host, p->port, p->queue_name);
+	    current_time = time(NULL);
+	    p->timeout = current_time + TIMEOUT_RETRY;
+            p->no_autosave = 0;
+            break;
+          }
+          httpSetTimeout(remote_http, HttpRemoteTimeout, http_timeout_cb, NULL);
+	  loadedppd = cupsGetPPD2(remote_http, remote_cups_queue);
+	  if (loadedppd == NULL && CreateRemoteRawPrinterQueues == 0) {
+            debug_printf("Unable to load PPD file for %s from the server %s:%d %s!\n",
+              p->queue_name, p->host, p->port, remote_cups_queue);
+            current_time = time(NULL);
+            p->timeout = current_time + TIMEOUT_RETRY;
+            p->no_autosave = 0;
+            httpClose(remote_http);
+            break;
+          } else if (loadedppd) {
+            debug_printf("Loaded PPD file %s for printer %s from server %s:%d!\n",
+	      loadedppd, p->queue_name, p->host, p->port);
+            /* Modify PPD to not filter the job */
+            pass_through_ppd = 1;
+            ppdfile = strdup(loadedppd);
+            httpClose(remote_http);
+          }
+
 	  if (ppdfile == NULL) {
 	    /* If we do not want CUPS-generated PPDs or we cannot obtain a
 	       CUPS-generated PPD, for example if CUPS does not create a
@@ -8676,7 +8650,55 @@
 		     buf);
 	ap_remote_queue_id_line_inserted = 0;
 	while (cupsFileGets(in, line, sizeof(line))) {
-	  if (!strncmp(line, "*Default", 8)) {
+          if (pass_through_ppd == 1 &&
+              (!strncmp(line, "*cupsFilter:", 12) ||
+               !strncmp(line, "*cupsFilter2:", 13))) {
+            /* "*cupfFilter(2): ..." line: Remove it and replace the
+               first one by a line which passes through the data
+               unfiltered */
+            if (new_cupsfilter_line_inserted == 0) {
+              cupsFilePrintf(out, "*cupsFilter: \"*/* 0 -\"\n");
+              new_cupsfilter_line_inserted = 1;
+            }
+            /* Find the end of the "*cupsFilter(2): ..." entry in the
+               case it spans more than one line */
+            do {
+              if (strlen(line) != 0) {
+                ptr = line + strlen(line) - 1;
+                while(isspace(*ptr) && ptr > line)
+                  ptr --;
+                if (*ptr == '"')
+                  break;
+              }
+            } while (cupsFileGets(in, line, sizeof(line)));
+          } else if (pass_through_ppd == 1 &&
+                     !strncmp(line, "*NickName:", 10)) {
+            /* Prefix the "NickName" of the printer so that automatic
+               PPD updaters skip this PPD */
+            ptr = strchr(line, '"');
+            if (ptr) {
+              ptr ++;
+              prefix = "Remote printer: ";
+              line[sizeof(line) - strlen(prefix) - 1] = '\0';
+              memmove(ptr + strlen(prefix), ptr, strlen(ptr) + 1);
+              memmove(ptr, prefix, strlen(prefix));
+              ptr = line + strlen(line) - 1;
+              while(isspace(*ptr) && ptr > line) {
+                *ptr = '\0';
+                ptr --;
+              }
+              if (*ptr != '"') {
+                if (ptr < line + sizeof(line) - 2) {
+                  *(ptr + 1) = '"';
+                  *(ptr + 2) = '\0';
+                } else {
+                  line[sizeof(line) - 2] = '"';
+                  line[sizeof(line) - 1] = '\0';
+                }
+              }
+            }
+            cupsFilePrintf(out, "%s\n", line);
+          } else if (!strncmp(line, "*Default", 8)) {
 	    strncpy(keyword, line + 8, sizeof(keyword) - 1);
 	    if ((strlen(line) + 8) > 1023)
 	      keyword[1023] = '\0';
@@ -8768,6 +8790,8 @@
 	  }
 	}
 	cupsFilePrintf(out,"*cupsFilter2: \"application/vnd.cups-pdf application/pdf 0 -\"\n");
+	if (pass_through_ppd == 1 && new_cupsfilter_line_inserted == 0)
+	  cupsFilePrintf(out, "*cupsFilter: \"*/* 0 -\"\n");
 
 	cupsFileClose(in);
 	cupsFileClose(out);
