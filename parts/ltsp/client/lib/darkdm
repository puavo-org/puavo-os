#!/bin/bash

set -eu

colorize() {
  local color component yellow_limit grey_limit green_limit value text \
        preseed_args

  component=$1
  yellow_limit=$2
  grey_limit=$3
  green_limit=$4
  value=$5
  text=$6

  color='grey'

  if [ -n "$preseed_json" ]; then
    preseed_args=$(printf %s "$preseed_json" \
                     | jq -r --arg component "$component" \
                          '.colorize[$component]') || true
    if [ -n "$preseed_args" -a "$preseed_args" != 'null' ]; then
      case "$component" in
        product_name)
          if printf "%s\n" "$value" | grep -qE "$preseed_args"; then
            color=green
          else
            color=red
          fi
          ;;
        *)
          yellow_limit="$(printf "%s\n" "$preseed_args" | awk '{ print $1 }')"
          grey_limit="$(  printf "%s\n" "$preseed_args" | awk '{ print $2 }')"
          green_limit="$( printf "%s\n" "$preseed_args" | awk '{ print $3 }')"
          ;;
      esac
    fi
  fi

  if [ "$component" != 'product_name' ]; then
    if [ "$value" -ge "$green_limit" ]; then
      color=green
    elif [ "$value" -ge "$grey_limit" ]; then
      color=grey
    elif [ "$value" -ge "$yellow_limit" ]; then
      color=yellow
    else
      color=red
    fi
  fi

  case "$color" in
    green)  echo -e "\e[1;32m${text}\e[0m" ;;
    yellow) echo -e "\e[1;33m${text}\e[0m" ;;
    red)    echo -e "\e[1;31m${text}\e[0m" ;;
    *)      echo "$text"                   ;;   # grey
  esac
}

get_smart_lettercode() {
  local i letter mask val

  val=$1
  mask=1

  for i in 0 1 2 3 4 5 6 7; do
    if [ "$((($val & $mask) && 1))" -eq 1 ]; then
      case "$i" in
        0) letter='P';;
        1) letter='O';;
        2) letter='B';;
        3) letter='F';;
        4) letter='A';;
        5) letter='T';;
        6) letter='E';;
        7) letter='S';;
      esac
    else
      letter='-'
    fi
    echo -n "$letter"
    mask=$(($mask << 1))
  done
}

list_disks() {
  local colorized_disk_info colorized_smart_status disk disk_devices \
        disk_label disk_model disk_size_in_gb smartctl_code smartctl_data \
        smartctl_json smart_color_status smart_lettercodes smart_status

  disk_devices=$(facter --json disks | jq -r '.disks | keys | .[]' \
                   | grep -E '^(mmcblk|nvme|sd|vd|xvda)')
  for disk in $disk_devices; do
    smartctl_code=0
    smartctl_json=$(smartctl -a --json=c "/dev/${disk}") || smartctl_code=$?
    smart_lettercode=$(get_smart_lettercode "$smartctl_code")
    if smartctl_data=$(
      printf "%s" "$smartctl_json" | jq -r '
        if has("firmware_version") then
          "firmware:" + .firmware_version + " " else "" end
        + if has("power_on_time") and (.power_on_time|has("hours")) then
            "power_on_hours:" + (.power_on_time.hours|tostring) + " "
          else "" end
        + if has("ata_smart_attributes") and (.ata_smart_attributes|has("table")) then
             [.ata_smart_attributes.table[]
               | select(.name == "Host_Writes_GiB"
                          or .name == "TLC_NAND_GB_Writes")
               | .name + ":" + .raw.string] | join(" ")
           else "" end'); then
      disk_model=$(printf "%s" "$smartctl_json" | jq -r .model_name) \
                     || true
    else
      disk_model=$(facter "disks.${disk}.model") || true
      smartctl_data='NO SMART DATA'
    fi
    if [ -z "$disk_model" ]; then disk_model='unknown model'; fi

    disk_label="${disk_model} / $(facter disks.${disk}.size)"
    colorized_disk_info=$(colorize disk \
                                   128000000000 256000000000 512000000000 \
                                   "$(facter disks.${disk}.size_bytes)"   \
                                   "$disk_label")

    if [ "$smartctl_code" -eq 0 ]; then
      smart_color_status=2
    else
      smart_color_status=0
    fi

    smart_status="$smart_lettercode : $smartctl_data"
    colorized_smart_status=$(
      colorize smart 1 1 2 "$smart_color_status" "$smart_status")

    printf "disk %-12s%s\n"  "${disk}:" "$colorized_disk_info"
    printf "SMART %-11s%s\n" "${disk}:" "$colorized_smart_status"
  done
}

list_networks() {
  local netdev network_devices
  network_devices=$(facter --json networking.interfaces \
                      | jq -r '.["networking.interfaces"] | keys | .[]' \
                      | grep -v lo | sort)
  for netdev in $network_devices; do
    printf "network %-9sIP %s / MAC %s\n" "${netdev}:"    \
           "$(facter networking.interfaces.${netdev}.ip)" \
           "$(facter networking.interfaces.${netdev}.mac)"
  done
}

show_battery_status() {
  local battery_capacity colorized_battery_capacity other_battery_info \
        battery_status upower_output

  upower_output=$(upower --show-info \
                         /org/freedesktop/UPower/devices/battery_BAT0 \
                    2>/dev/null || true)

  battery_capacity=$(printf "%s" "$upower_output" \
    | awk '$1 == "capacity:" { sub(/%$/, "", $2); printf "%d\n", $2 }')

  if [ -z "$battery_capacity" ]; then
    status='NONE'
  else
    colorized_battery_capacity=$(colorize battery 70 80 90 \
                                   "$battery_capacity" \
                                   "${battery_capacity}% (capacity)")
    other_battery_info=$(printf "%s\n" "hello $upower_output" \
      | awk '
          $1 == "energy:"             { energy             = $2 $3 }
          $1 == "energy-full:"        { energy_full        = $2 $3 }
          $1 == "energy-full-design:" { energy_full_design = $2 $3 }
          END {
            printf "%s/%s (design capacity: %s)", energy, energy_full,
              energy_full_design
          }
        ')
    battery_status="${colorized_battery_capacity} | ${other_battery_info}"
  fi

  printf "battery:         %s\n" "$battery_status"
}

windows_license() {
  local machine_build_id windows_product_key

  windows_product_key=$(
    strings /sys/firmware/acpi/tables/MSDM 2>/dev/null \
      | awk '$1 ~ /^[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}-[0-9A-Z]{5}$/')
  [ -z "$windows_product_key" ] && return 0
  machine_build_id=$(strings /sys/firmware/dmi/tables/DMI 2>/dev/null \
                       | grep '^BUILDID')
  if [ -n "$machine_build_id" ]; then
    machine_build_id=" (${machine_build_id})"
  fi

  printf %s "${windows_product_key}${machine_build_id}"
}

get_cpu_value() {
  # XXX This is a very crude way of evaluating processor "goodness".
  # XXX For example it does not consider AMD CPUs at all.
  case "$1" in
    *i3-*) echo 1 ;;
    *i5-*) echo 2 ;;
    *i7-*) echo 3 ;;
    *)     echo 0 ;;
  esac
}

darkdm_common_systeminfo()
{
  local colorized_cpu colorized_display_resolution colorized_memory \
        colorized_product_name cpu cpu_text display_resolution \
        horz_resolution product_name sku_number this_image this_release \
        vert_resolution

  this_image=$(cat /etc/puavo-image/name)
  this_release=$(cat /etc/puavo-image/release)

  colorized_memory=$(colorize memory 4183116800 8366233600 16732467200 \
                              "$(facter memory.system.total_bytes)"    \
                              "$(facter memory.system.total)")
  cpu=$(facter processors.models.1)
  cpu_text="$(facter processors.count) CPUs / ${cpu}"
  colorized_cpu=$(colorize cpu 1 2 3 "$(get_cpu_value "$cpu")" "$cpu_text")

  colorized_display_resolution=''
  if [ -e /sys/class/graphics/fb0/virtual_size ]; then
    horz_resolution=$(awk -F, '$1 ~ /^[0-9]+$/ { print $1 }' \
                                /sys/class/graphics/fb0/virtual_size) || true
    vert_resolution=$(awk -F, '$2 ~ /^[0-9]+$/ { print $2 }' \
                        /sys/class/graphics/fb0/virtual_size) || true
    if [ -n "$horz_resolution" -a -n "$vert_resolution" ]; then
      colorized_display_resolution=$(colorize resolution 1280 1440 1920 \
        "$horz_resolution" "${horz_resolution}x${vert_resolution} (resolution)")
    fi
  fi
  if [ -z "$colorized_display_resolution" ]; then
    colorized_display_resolution='? (resolution)'
  fi

  sku_number=$(cat /sys/devices/virtual/dmi/id/product_sku 2>/dev/null || true)
  if [ -z "$sku_number" ]; then
    sku_number='?'
  fi

  product_name=$(facter dmi.product.name) || true
  colorized_product_name=$(colorize product_name 0 0 0 "$product_name" \
                                    "$product_name")

  cat <<EOF
image:   ${this_image}
release: ${this_release}

bios:            $(facter dmi.bios.vendor) / $(facter dmi.bios.version)
cpu:             ${colorized_cpu}
$(list_disks)
memory:          ${colorized_memory}
display:         ${colorized_display_resolution}
$(list_networks)
$(show_battery_status)
product:         $(facter dmi.manufacturer) / ${colorized_product_name}
serial numbers:  $(facter dmi.product.serial_number) (machine) / $(facter dmi.board.serial_number) (board) / ${sku_number} (SKU)
Windows license: $(windows_license)
${device_identifier}
EOF
}

darkdm_short_systeminfo()
{
  printf "%s\n" "$common_systeminfo"
  cat <<EOF
some PCI devices:
$(lspci | awk '$2 == "Network" || $2 == "VGA"' | sed 's/^/  /')
EOF
}

darkdm_long_systeminfo()
{
  printf "%s\n" "$common_systeminfo"
  cat <<EOF

PCI devices:
$(lspci | sed 's/^/  /')

USB devices:
$(lsusb | sed 's/^/  /')
EOF
}

darkdm_send_sysinfo()
{
  if [ ! -x /usr/sbin/puavo-send-sysinfo-to-puavo ]; then
    return 0
  fi

  echo -n 'Sending system information to Puavo... '
  if timeout -k 3 30 /usr/sbin/puavo-send-sysinfo-to-puavo >/dev/null 2>&1; then
    echo 'OK.'
    return 0
  fi

  echo 'FAILED.'
  echo 'Try /usr/sbin/puavo-send-sysinfo-to-puavo if you want to know why.'
  return 1
}

darkdm_reboot()
{
  reboot
}

darkdm_install()
{
  if ! /usr/sbin/puavo-install "$@"; then
    # give some time for users to read the error message, if there is any
    echo
    sleep 2

    # Try sending sysinfo anyway, we may have a successful registration and
    # partial installation done.
    darkdm_send_sysinfo || true

    return 1
  fi

  darkdm_send_sysinfo || true

  darkdm_reboot
}

darkdm_print_help()
{
  cat <<'EOF'

Puavo OS Command Shell

Commands:
  bios                   configure BIOS (only on some supported machines)
  expert-install         install Puavo OS with more detailed questions
  expert-preinstall      install without registering, expert mode
  help                   show more detailed help
  info                   show machine information
  install                install Puavo OS to this device and reboot
  kbd [layout]           set keyboard layout
  make-install-disk      make a bootable usb flash drive or some such
  mount                  mount puavo filesystems (if host is already installed)
  nmtui                  configure network (not available on netboot devices)
  poweroff               poweroff the system
  preinstall             install without registering
  preseed-install (pi)   install with a preseed
  preseed-preinstall     install without registering but with a preseed
  reboot                 reboot the system
  restoredisk            restore from bootserver (only on netboot devices)
  savedisk               save to bootserver (only on netboot devices)
  shell                  spawn a shell
  test                   run some hardware tests
  update                 update the local Puavo OS installation and reboot
EOF
}

darkdm_print_short_help() {
  darkdm_print_help \
    | awk '$1 !~ /bios|expert|mount|reboot|preinstall|savedisk/'
}

darkdm_shell()
{
  /bin/bash
}

darkdm_mount()
{
  local old_puavo_hosttype puavo_hosttype

  if mountpoint -q /images && mountpoint -q /state; then
    return 0
  fi

  old_puavo_hosttype=$(puavo-conf puavo.hosttype)

  if ! {
    mkdir -p /state                                      \
      && mount /dev/mapper/puavo-state /state            \
      && read puavo_hosttype < /state/etc/puavo/hosttype \
      && puavo-conf puavo.hosttype "$puavo_hosttype"     \
      && mount /dev/mapper/puavo-images /images          \
      && /etc/puavo-conf/scripts/mount_local_partitions  \
      && /etc/puavo-conf/scripts/setup_state_partition
  }; then
    echo 'Could not setup host state for an update' >&2
    puavo-conf puavo.hosttype "$old_puavo_hosttype"
    return 1
  fi
}

darkdm_update()
{
  local image_name update_status

  update_status=0

  if ! darkdm_mount; then
    echo 'Could not mount /images and /state, aborting update.' >&2
    return 1
  fi

  if grep -qw puavo.hosttype=unregistered /proc/cmdline; then
    # We have booted as unregistered, which means that we probably do
    # not have booted the correct image (this can happen in case this
    # is registered to a different organisation than the bootserver and
    # the bootserver does not know about this host).
    # Update in a "normal way".
    if ! /usr/lib/puavo-ltsp-install/update-configuration; then
      echo 'Configuration update errors, yet continuing...' >&2
      update_status=1
    fi
    /usr/lib/puavo-ltsp-install/update-images false || update_status=1
  elif image_name=$(cat /etc/puavo-image/name 2>/dev/null); then
    if mountpoint -q /installimages; then
      /usr/sbin/puavo-install-and-update-ltspimages \
        --install-from-file "/installimages/${image_name}" "$image_name" \
          || update_status=1
    elif [ -e /run/puavo/nbd-server ]; then
      /usr/sbin/puavo-install-and-update-ltspimages \
        --install-from-nbd /dev/nbd0 "$image_name" || update_status=1
    else
      echo 'Can not find an update image, FAILED.' >&2
      update_status=1
    fi
  else
    update_status=1
  fi

  if ! /usr/lib/puavo-ltsp-install/update-configuration >/dev/null 2>&1; then
    echo 'Configuration update FAILED!' >&2
    update_status=1
  else
    echo 'Configuration update OK.'
  fi

  darkdm_send_sysinfo || true

  if [ "$update_status" -ne 0 ]; then
    return "$update_status"
  fi

  darkdm_reboot
}

darkdm_poweroff()
{
  poweroff
}

darkdm_kbd() {
  new_layout=$1

  current_layout=$(localectl status \
                     | awk '/X11 Layout:/ { split($3, a, ","); print a[1] }')

  if [ -z "$new_layout" ]; then
    possible_layouts="$(localectl list-x11-keymap-layouts | xargs \
                          | fmt -w 70 | sed 's/^/  /')"

    cat <<EOF
Current keyboard layout is: $current_layout
Choose from layouts:
$possible_layouts
EOF
    read -p 'Choose keyboard layout: ' new_layout
  fi

  if [ -z "$new_layout" ]; then
    echo 'Not changing keyboard layout'
  elif localectl set-keymap "$new_layout"; then
    echo "Changed keyboard layout to \"${new_layout}\""
  else
    echo "Could not change keyboard layout" >&2
  fi

  setupcon

  sleep 0.5
  echo
}

darkdm_menu()
{
  local command forced initial_command prompt

  initial_command=$1
  forced=$2

  show_helpinfo=true

  while true; do
    if $show_helpinfo; then
      printf "%s\n" "$short_systeminfo"
      darkdm_print_short_help
    fi
    show_helpinfo=true

    if [ "$forced" = '--show-unforced-warning' ]; then
      cat <<-EOF >&2

	  !! Attempted to force preseed installation operation even though !!
	  !! this host already has a Puavo OS installation, unforced.      !!
	  !! (You can still install with preseed by pressing ENTER.)       !!

	EOF
    fi

    if [ -n "$initial_command" ]; then
      prompt="[${initial_command}]> "
    else
      prompt='> '
    fi

    if [ "$forced" = '--force' ]; then
      command="$initial_command"
    else
      read -e -p "$prompt" command command_args || return 1
      if [ -z "$command" -a -n "$initial_command" ]; then
        command="$initial_command"
      fi
    fi

    case "$command" in
      bios)
        puavo-bios-config || return 1
        ;;
      expert-install)
        darkdm_install expert-install || return 1
        ;;
      expert-preinstall)
        darkdm_install expert-preinstall || return 1
        ;;
      help|?)
        show_helpinfo=false
        darkdm_print_help
        ;;
      info)
        if [ -z "$long_systeminfo" ]; then
          long_systeminfo=$(darkdm_long_systeminfo)
        fi
        printf "%s\n" "$long_systeminfo"
        show_helpinfo=false
        ;;
      install)
        darkdm_install || return 1
        ;;
      kbd)
        darkdm_kbd "$command_args" || return 1
        ;;
      make-install-disk)
        puavo-make-install-disk || return 1
        ;;
      mount)
        darkdm_mount || return 1
        ;;
      nmtui)
        if [ ! -x /usr/bin/nmtui ]; then
          echo 'nmtui not available' >&2
          return 1
        else
          nmtui || return 1
        fi
        ;;
      poweroff)
        darkdm_poweroff || return 1
        ;;
      preinstall)
        darkdm_install preinstall || return 1
        ;;
      preseed-preinstall)
        darkdm_install preseed-preinstall || return 1
        ;;
      preseed-install|pi)
        darkdm_install preseed-install || return 1
        ;;
      reboot)
        darkdm_reboot || return 1
        ;;
      restoredisk)
        puavo-disk-clone restoredisk || return 1
        ;;
      savedisk)
        puavo-disk-clone savedisk || return 1
        ;;
      shell)
        darkdm_shell || return 1
        ;;
      test)
        # Keyboard test makes tmux exit prematurely in ttys (not under X)
        # unless run outside tmux, this is why we run tests with openvt.
        # Actually even with this tmux does exit without a warning, but
        # it will be restarted after this has exited, thus it is not
        # a big issue.
        openvt -s -w /usr/sbin/puavo-test-hardware || return 1
        ;;
      update)
        darkdm_update || return 1
        ;;
      *)
        echo "Error: invalid command '${command}'." >&2
        echo
        sleep 1
        ;;
    esac
  done
}

check_forced_operation() {
  local forced_operation image_server

  if [ -z "$preseed_json" ]; then
    return 1
  fi

  forced_operation=$(printf %s "$preseed_json" | jq -r '.["force-operation"]')
  if [ "$forced_operation" = 'null' ]; then forced_operation=''; fi
  if [ "$forced_operation" = '' ]; then return 1; fi

  printf "%s" "$forced_operation"
}

darkdm_main()
{
  local forced
  local hosttype
  local initial_command

  hosttype=$(cat /etc/puavo/hosttype)
  case "$hosttype" in
    laptop|wirelessaccesspoint)
      initial_command='update'
      ;;
    unregistered)
      initial_command='install'
      ;;
    *)
      initial_command=
      ;;
  esac

  forced=''
  if forced_operation=$(check_forced_operation 2>/dev/null); then
    initial_command="$forced_operation"
    forced='--force'

    case "$initial_command" in
      preseed-install|preseed-preinstall)
        if vgs puavo >/dev/null 2>&1; then
          forced='--show-unforced-warning'
        fi
        ;;
    esac
  fi

  darkdm_menu "$initial_command" "$forced" || return 1
}

gather_device_data()
{
  cat <<EOF
{
"battery": "$(upower --show-info /org/freedesktop/UPower/devices/battery_BAT0 \
  |grep 'vendor:\|model:\|serial:\|capacity:\|percentage:\|voltage:' 2>/dev/null || true)"
"bios": "$(facter dmi.bios.vendor) / $(facter dmi.bios.version)",
"cpu": "$(facter processors.models.1)",
"disks": "$(facter --json disks | jq -r '.disks ')",
"manufacturer": "$(facter dmi.manufacturer)",
"memory": "$(facter memory.system.total_bytes)" "$(facter memory.system.total)",
"model": "$(facter dmi.product.name)",
"resolution" "`cat /sys/class/graphics/fb0/virtual_size`",
"serialnum": "$(facter dmi.product.serial_number)"
}
EOF
}


# get preseed, we might need it
echo -n 'Getting preseed and device identifier (if server can be found)... '
preseed_json=''
device_identifier=''
if image_server=$(/usr/lib/puavo-ltsp-client/lookup-image-server-by-dns); then
  preseed_url="https://${image_server}/preseeds/index.json"
  if ! preseed_json=$(curl --cacert /etc/puavo-conf/rootca.pem --fail \
                           --max-time 5 --silent "$preseed_url"); then
    preseed_json=''
  fi
  deviceid_url="https://${image_server}/deviceid"
  if ! device_identifier=$(curl --cacert /etc/puavo-conf/rootca.pem \
                           -d '$(gather_device_data)' --fail --max-time 5 --silent \
                           -X POST "$deviceid_url"); then
    device_identifier=''
  fi
fi
if [ -n "$preseed_json" ]; then
  echo -n 'Preseed OK. '
else
  echo -n 'Preseed failed. '
fi

if [ "$device_identifier" == "n/a" ]; then
  echo 'Device backend not enabled.'
  device_identifier=''
elif [ -n "$device_identifier" ]; then
  echo 'Device identifier OK.'
  device_identifier="Device id:       $device_identifier"
else
  echo 'Server does not support device backend.'
  device_identifier=''
fi

echo 'Gathering system information...'
echo
common_systeminfo=$(darkdm_common_systeminfo 2>/dev/null || true)
short_systeminfo=$(darkdm_short_systeminfo 2>/dev/null || true)
long_systeminfo=''

while true; do
  if darkdm_main; then
    echo 'Operation was a success.'
  else
    echo 'Operation failed.'
  fi

  echo 'Press ENTER to continue.'
  read _
done
