#!/usr/bin/wish

# XXX this should log things to syslog

# XXX should the new password still be rechecked?
# XXX in case some time has happened between login
# XXX and this operation and the password has changed again?

package require base64
package require json
package require json::write

proc logger {args} {
  catch { exec logger -t puavo-homecrypt {*}$args }
}

proc change_password {new_pw} {
  global crypthome_mgmt_request_path old_password

  if {$old_password eq ""} {
    return
  }

  set op_success false

  set logerrmsg  ""
  set usererrmsg ""

  try {
    set username [exec id -nu]
    set input [
      ::json::write object \
        request  [::json::write object \
                    {login[uid]}         [::json::write string $username]     \
                    {login[password]}    [::json::write string $old_password] \
                    {user[new_password]} [::json::write string $new_pw]]      \
        response [::json::write object status [::json::write string ok]]]
    exec -ignorestderr puavo-crypthome \
                         update-crypthome-password-from-password-form << $input
    set op_success true
  } trap CHILDSTATUS {errmsg options} {
    set status [lindex [dict get $options -errorcode] 2]
    # 12 == password incorrect
    if {$status == 12} {
      set logerrmsg "user provided a wrong password for encrypted home"
      set usererrmsg "YOUR PASSWORD IS WRONG"
    } else {
      set logerrmsg [
        format "%s: %s" \
          "error when attempting to change home directory encryption password" \
          "puavo-crypthome returned error code: ${status}"]
      set usererrmsg "SOME UNEXPECTED ERROR HAPPENED"
    }
  } on error {errmsg} {
    set logerrmsg [
      format "%s: %s" \
        "error when attempting to change home directory encryption password" \
        $errmsg]
    set usererrmsg "SOME UNEXPECTED ERROR HAPPENED"
  } finally {
    set old_password ""
  }

  if {$logerrmsg ne ""} {
    logger -p user.err $logerrmsg
  }
  if {$usererrmsg ne ""} {
    tk_messageBox -icon error -message $usererrmsg
  }

  if {$op_success} {
    file delete $crypthome_mgmt_request_path
    tk_messageBox -message "SUCCESS!  Please login again with your password."
    exit 0
  }
}

proc update_progress {txt} {
  global update_in_progress

  set percentage_string [lindex [regexp -inline -all -- {\S+} $txt] 1]
  if {[regexp {(\d+)%} $percentage_string _ percentage]} {
    .migrate.progress configure -value $percentage
  }

  set update_in_progress ""
}

proc append_text_to_migrate_progress {cmd_f} {
  global update_in_progress

  set success false
  set error_txt ""

  set txt [gets $cmd_f]
  if {[eof $cmd_f]} {
    try {
      close $cmd_f
      set success true
    } on error {errmsg options} {
      # close might trigger an error when standard error contains something
      if {[lindex [dict get $options -errorcode] 0] eq "NONE"} {
        set success true
      } else {
        # XXX should log the error with some more detail ?
        set error_txt "ERROR OCCURRED DURING MIGRATION"
      }
    }
  }

  if {$error_txt ne ""} {
    .migrate.finished.error_message configure -text $error_txt
    pack .migrate.finished.error_message
  } elseif {$success} {
    pack .migrate.finished.go_to_login
    .migrate.progress configure -value 100
  } elseif {$update_in_progress eq ""} {
    set update_in_progress [
      after 100 [list update_progress $txt]
    ]
  }
}

proc migrate_operation {cmd} {
  global update_in_progress

  # XXX some kind of a button might be nice, that could allow
  # XXX exit once done ... perhaps
  # XXX "HOME MIGRATION IN PROGRESS DO NOT TURN OFF THE COMPUTER"
  # XXX should be appropriate, with no buttons for control

  switch -- $cmd {
    to_crypthome {
      set cmd [list sudo -n /usr/bin/puavo-crypthome migrate-to-crypthome]
      set infotext [
        format "%s\n%s" \
               "Migration to an encrypted home directory in progress," \
               "do not turn off the computer."
      ]
    }
    to_plainhome {
      set cmd [list sudo -n /usr/bin/puavo-crypthome migrate-to-plainhome]
      set infotext [format "%s\n%s" "Home directory decryption in progress," \
                                    "do not turn off the computer."]
    }
    default {
      error "internal error: unknown migrate operation"
    }
  }

  set bg_color "#93b176"        ; # XXX duplication

  setup_ui $bg_color

  frame .migrate -bg $bg_color
  frame .migrate.finished -bg $bg_color -height 50 -width 200
  label .migrate.info -bg $bg_color -font puavoFont -text $infotext
  ttk::progressbar .migrate.progress -length 400
  button .migrate.finished.go_to_login -bg {#3388ff} -font puavoFont \
         -text "Login again" -command { exit 0 }
  label .migrate.finished.error_message -bg $bg_color -fg {#ff2222} \
        -font puavoFont
  pack .migrate -expand 1
  pack .migrate.info .migrate.progress .migrate.finished -side top -pady 10

  set update_in_progress ""

  set f [open "|$cmd" r]
  fconfigure $f -buffering line
  fileevent $f readable [list append_text_to_migrate_progress $f]
}

proc migrate_to_crypthome {} {
  migrate_operation to_crypthome
}

proc migrate_to_plainhome {} {
  migrate_operation to_plainhome
}

proc setup_ui {bg_color} {
  wm attributes . -fullscreen 1
  wm protocol . WM_DELETE_WINDOW { }      ;# do not allow window close

  . configure -bg $bg_color

  font create puavoFont -family {Ubuntu Condensed} -size 20 -weight bold
}

proc show_password_update_ui {mgmt_request} {
  global old_password

  set old_password ""

  try {
    set new_password [::base64::decode [dict get $mgmt_request new_password]]
    if {$new_password eq ""} { error "new password is empty" }
  } on error {errmsg} {
    logger -p user.err "could not read password from mgmt request: ${errmsg}"
    exit 1
  }

  set bg_color "#93b176" ;# XXX duplication

  setup_ui $bg_color

  frame .pw_change -bg $bg_color
  label .pw_change.explanation -bg $bg_color \
        -font puavoFont \
        -text "You must provide your old home directory password: "
  entry .pw_change.old_password -font puavoFont -show * \
        -textvariable old_password

  pack .pw_change -fill y -expand 1
  pack .pw_change.explanation .pw_change.old_password -side left -padx 3

  focus .pw_change.old_password

  bind .pw_change.old_password <KeyRelease-Return> [
    list change_password $new_password
  ]
}

set crypthome_mgmt_request_path \
    "$env(HOME)/.puavo/crypthome_mgmt_request.json"

try {
  set f ""
  set f [open $crypthome_mgmt_request_path]
  set mgmt_request [::json::json2dict [read $f]]
  close $f
} on error {errmsg} {
  if {$f ne ""} { close $f }
  logger -p user.err "could not read the management request: ${errmsg}"
  exit 1
}

set op [dict get $mgmt_request operation]

switch -- $op {
  change-password      { show_password_update_ui $mgmt_request }
  migrate-to-crypthome { migrate_to_crypthome }
  migrate-to-plainhome { migrate_to_plainhome }
  default { error "unsupported operation '${op}'" }
}
