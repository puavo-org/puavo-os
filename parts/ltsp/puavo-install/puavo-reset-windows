#!/bin/bash

## puavo-reset-windows
##
## Scans all block devices for Windows partitions and resets them. By
## default, asks user for a confirmation to reset.
##
## --force              no questions asked
## --secure-delete      wipe unused data from Windows partitions after reset
##

set -eu
set -o pipefail

## Globals
exitval=1                 # Premature exit is an error by default.
tmpdir=                   # Will be created after EXIT trap is set.
use_force=false           # --force sets to true
use_secure_delete=false   # --secure-delete sets to true

on_exit()
{
    set +e

    if [ -n "${tmpdir}" ]; then
        rm -rf "${tmpdir}"
    fi

    rm -f /run/puavo-reset-windows.pid

    exit $exitval
}

logmsg() {
  logger -t puavo-reset-windows -p "user.${1}" "$2" || true
}

loginfo() {
  printf "> %s\n" "$1" >&2
  logmsg info "$1"
}

logerr() {
  printf "> ERROR: %s\n" "$1" >&2
  logmsg error "$1"
}

usage() {
  cat <<EOF
$(basename "$0") [--force] [--secure-delete]

  --force               no questions asked
  --secure-delete       wipe unused data of the Windows primary partition
EOF
  exit 1
}

print0_win_primary_partition_devpaths()
{
    while IFS= read -r -d $'\0' ntfs_partition_devpath; do
        ntfsls -F "${ntfs_partition_devpath}" | grep -q -x 'Windows/' || {
            continue
        }
        printf '%s\0' "${ntfs_partition_devpath}"
        # GPT Microsoft basic data partition GUID: ebd0a0a2-b9e5-4433-87c0-68b6b72699c7
        # MBR HPFS/NTFS/exFAT type: 0x7
    done < <(lsblk -n -l -o PATH,PARTTYPE | awk '$2 == "0x7" || $2 == "ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" {printf "%s\0", $1}') || {
        logerr 'Failed to list partitions.'
        return 1
    }
}

print0_win_product_name()
{
    local win_primary_partition_devpath win_product_name

    win_primary_partition_devpath=$1
    shift

    ntfscat "${win_primary_partition_devpath}" 'Windows/System32/config/SOFTWARE' >"${tmpdir}/software_hive" || {
        logerr "Failed to get SOFTWARE hive from '${win_primary_partition_devpath}'."
        return 1
    }

    win_product_name=$(hivexget "${tmpdir}/software_hive" 'Microsoft\Windows NT\CurrentVersion' | sed -r -n 's/"ProductName"="(.+)"$/\1/p') || {
        logerr "Failed to parse ProductName from SOFTWARE hive of '${win_primary_partition_devpath}'."
        return 1
    }

    printf '%s' "${win_product_name}"
}

print0_win_language_tag()
{
    local win_language_id \
          win_language_tag \
          win_primary_partition_devpath

    win_primary_partition_devpath=$1
    shift

    ntfscat "${win_primary_partition_devpath}" 'Windows/System32/config/SYSTEM' >"${tmpdir}/system_hive" || {
        logerr "Failed to get SYSTEM hive from '${win_primary_partition_devpath}'."
        return 1
    }

    win_language_id=$(hivexget "${tmpdir}/system_hive" 'ControlSet001\Control\Nls\Language' \
                          | sed -r -n 's/"InstallLanguage"="([0-9A-Fa-f]{4})"$/\1/p' \
                          | tr '[:upper:]' '[:lower:]') || {
        logerr "Failed to parse InstallLanguage from SYSTEM hive of '${win_primary_partition_devpath}'."
        return 1
    }

    ## https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-LCID/%5bMS-LCID%5d.pdf
    case "${win_language_id}" in
        '0407')
            win_language_tag='de-DE'
            ;;
        '0409')
            win_language_tag='en-US'
            ;;
        '040b')
            win_language_tag='fi-FI'
            ;;
        '041d')
            win_language_tag='sv-SE'
            ;;
        '0419')
            win_language_tag='ru-RU'
            ;;
        '0422')
            win_language_tag='uk-UA'
            ;;
        *)
            logerr "Unsupported language ID '${win_language_id}'"
            return 1
            ;;
    esac

    printf '%s' "${win_language_tag}"
}

check_wim_file()
{
    local expected_win_language_tag \
          expected_win_product_name \
          win_language_tag \
          win_product_name \
          wim_file_path

    wim_file_path=$1
    shift

    expected_win_product_name=$1
    shift

    expected_win_language_tag=$1
    shift

    wiminfo "${wim_file_path}" | grep -c '^Index:' | grep -x -q 1 || {
        logerr "WIM file '${wim_file_path}' has multiple images, expected it to have just one."
        return 1
    }

    win_product_name=$(wiminfo "${wim_file_path}" | sed -r -n 's/^Product Name:\s*(.+)$/\1/p')
    if [ "${win_product_name}" != "${expected_win_product_name}" ]; then
        logerr "WIM file '${wim_file_path}' has image for an incorrect product '${win_product_name}'."
        return 1
    fi

    win_language_tag=$(wiminfo "${wim_file_path}" | sed -r -n 's/^Default Language:\s*(.+)$/\1/p')
    if [ "${win_language_tag}" != "${expected_win_language_tag}" ]; then
        logerr "WIM file '${wim_file_path}' has image for an incorrect language '${win_language_tag}'."
        return 1
    fi

    return 0
}


fetch_wim_file()
{
    local wim_file_path \
          win_language_tag \
          win_product_name \

    win_product_name=$1
    shift

    win_language_tag=$1
    shift

    loginfo "Fetching WIM file for '${win_product_name} ${win_language_tag}'..."

    ## TODO: Where WIM files should be fetched from?
    ##
    ## We need 4 files per language:
    ## - Windwos 10 Home
    ## - Windows 10 Pro
    ## - Windows 11 Home
    ## - Windows 11 Pro
    ##
    ## So perhaps we need to support:
    ## - cdn.opinsys.fi / cdn.puavo.org? (We probably still need to download the WIM file to /home or /images for the duration of reset)
    ## - USB mass media? (If we decide to use a separate "Windows Reset USB stick")
    ## - Other persistent storage? (Reserve 6G or so for the factory image)
    ## - Live download from Microsoft website via Mido? (Microsoft does seem to IP-block some legit IP addresses, this is not reliable method at all.)
    ##
    ## Win10 images are ~7G (compressed).

    ## TODO: obviously remove this once we know where to get
    ## images. This is just for development purposes.
    wim_file_path="/home/wim-files/${win_product_name}_${win_language_tag}.wim"

    loginfo "Fetched WIM file '${wim_file_path}' for '${win_product_name} ${win_language_tag}'."

    check_wim_file "${wim_file_path}" "${win_product_name}" "${win_language_tag}" || {
        logerr "Invalid WIM file '${wim_file_path}' for '${win_product_name} ${win_language_tag}'."
        return 1
    }

    printf '%s' "${wim_file_path}"
}

reset_win()
{
    local wim_file_path \
          win_language_tag \
          win_primary_partition_devpath \
          win_product_name

    win_product_name=$1
    shift

    win_language_tag=$1
    shift

    win_primary_partition_devpath=$1
    shift

    wim_file_path=$(fetch_wim_file "${win_product_name}" "${win_language_tag}") || {
        logerr "Failed to fetch WIM file for '${win_product_name}'."
        return 1
    }

    # Force needed to overwrite the existing filesystem without questions.
    mkfs.ntfs -f "${win_primary_partition_devpath}" || {
        logerr "Failed to create NTFS filesystem on '${win_primary_partition_devpath}'"
        return 1
    }

    wimapply "${wim_file_path}" "${win_primary_partition_devpath}" || {
        logerr "Failed to apply WIM image from '${wim_file_path}' to '${win_primary_partition_devpath}'."
        return 1
    }

    if $use_secure_delete; then
        # Wipes all unused data from the partition.
        ntfswipe -a "${win_primary_partition_devpath}" || {
            logerr "Failed to wipe '${win_primary_partition_devpath}'."
            return 1
        }
    fi

    return 0
}


reset_all_wins()
{
    local returnval \
          win_language_tag \
          win_product_name

    returnval=0

    while IFS= read -r -d $'\0' win_primary_partition_devpath; do
        win_product_name=$(print0_win_product_name "${win_primary_partition_devpath}") || {
            logerr "Failed to get the product name of Windows on '${win_primary_partition_devpath}'."
            returnval=1
            continue
        }
        win_language_tag=$(print0_win_language_tag "${win_primary_partition_devpath}") || {
            logerr "Failed to get the language of Windows on '${win_primary_partition_devpath}'."
            returnval=1
            continue
        }

        loginfo "Detected '${win_product_name} ${win_language_tag}' on '${win_primary_partition_devpath}'."

        ## TODO: add (and test!) Windows 11 support
        case "${win_product_name}" in
            'Windows 10 Home' | 'Windows 10 Pro')
                ;;
            *)
                logerr "Skipping unsupported '${win_product_name}' on '${win_primary_partition_devpath}'."
                returnval=1
                continue
                ;;
        esac

        $use_force || dialog --no-lines --clear --erase-on-exit --defaultno --yesno \
               "Reset '${win_product_name} ${win_language_tag}' on '${win_primary_partition_devpath}'?" 5 80 || {
            logerr "Skipping '${win_product_name} ${win_language_tag}' on '${win_primary_partition_devpath}'."
            returnval=1
            continue
        }

        $use_force || dialog --no-lines --clear --erase-on-exit --defaultno --yesno \
               'All data will be lost! Are you really sure you want to proceed?' 5 80 || {
            logerr "Skipping '${win_product_name} ${win_language_tag}' on '${win_primary_partition_devpath}'."
            returnval=1
            continue
        }

        reset_win "${win_product_name}" "${win_language_tag}" "${win_primary_partition_devpath}" || {
            logerr "Failed to reset '${win_product_name} ${win_language_tag}' on '${win_primary_partition_devpath}'."
            returnval=1
            continue
        }

        loginfo "Reset '${win_product_name} ${win_language_tag}' on '${win_primary_partition_devpath}' to factory settings successfully."

    done < <(print0_win_primary_partition_devpaths) || {
        logerr "Unexpected termination of Windows reset loop"
        returnval=1
    }

    return $returnval
}

while [ $# -ne 0 ]; do
    case "$1" in
        --force)
            use_force=true
            shift
            ;;
        --secure-delete)
            use_secure_delete=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            usage
            ;;
    esac
done

[ $# -eq 0 ] || usage

if [ "$(id -u)" -ne 0 ]; then
  echo 'You can run me as root only!' >&2
  exit 1
fi

exec {lockfd}<> /run/puavo-reset-windows.pid
flock -x -n "${lockfd}" || {
    logerr "puavo-reset-windows is already running!"
    exit 1
}

trap on_exit EXIT

echo "$$" >/run/puavo-reset-windows.pid

tmpdir=$(mktemp -d)

reset_all_wins

# Reached the end, everything is fine then.
exitval=0
