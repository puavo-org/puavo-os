#!/bin/bash

set -eu
set -o pipefail

g_exitval=1
g_no_efi_is_ok=false
g_cmd=
g_umount_on_exit=
PID_FILE=/run/puavo-manage-efi.pid # Locks this file to ensure only one puavo-manage-efi is running

log() {
  logger -t puavo-manage-efi -p "user.${1}" "$2" || true
}

on_exit()
{
  set +e

  if [ -n "${g_umount_on_exit}" ]; then
    umount "${g_umount_on_exit}" || log err "Failed to umount '${g_umount_on_exit}'"
  fi

  rm -f "${PID_FILE}"

  if [ ${g_exitval} -ne 0 ]; then
    log err 'Failed!'
  fi

  exit ${g_exitval}
}

efibootmgr_windows() {
  local efibootmgr_flag boot_entry

  efibootmgr_flag=$1
  shift

  for boot_entry in $(efibootmgr | awk '/Windows/ {print substr($0,5,4)}'); do
    efibootmgr -q "${efibootmgr_flag}" -b "${boot_entry}" || return 1
  done

  return 0
}

esp_mount() {
  local esp_devpath esp_mountpath

  esp_devpath=$(lsblk -n -l -o PATH,PARTTYPE | awk '$2 == "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" {print $1}') || return 1
  if [ -z "${esp_devpath}" ]; then
    log err 'EFI system partition not found'
    return 1
  fi

  esp_mountpath=$(awk "-vdev=${esp_devpath}" '$1 == dev {print $2}' /proc/mounts) || return 1

  # Mount only if not already mounted.
  if [ -z "${esp_mountpath}" ]; then
    esp_mountpath=/boot/efi
    mkdir -p "${esp_mountpath}" || return 1
    mount -onodev,nosuid "${esp_devpath}" "${esp_mountpath}" || return 1
    g_umount_on_exit="${esp_mountpath}"
  fi

  echo "${esp_mountpath}"
}

esp_break_windows() {
  local esp_mountpath defused_windows_tmpfile

  esp_mountpath=$(esp_mount) || return 1

  if [ -d "${esp_mountpath}/EFI/Microsoft" ]; then
    log info 'Defusing Windows...'
    if [ -e "${esp_mountpath}/EFI/Puavo-defused-Windows.tar.gz" ]; then
      log err "Failed to defuse Windows, '${esp_mountpath}/EFI/Puavo-defused-Windows.tar.gz' already exists"
      return 1
    fi

    defused_windows_tmpfile=$(mktemp -p "${esp_mountpath}/EFI" 'Puavo-defused-Windows.tar.gz.tmp.XXXXXXXX')
    tar -C "${esp_mountpath}/EFI" -z -c -f "${defused_windows_tmpfile}" Microsoft || {
      rm -rf "${defused_windows_tmpfile}" || true
      return 1
    }
    mv "${defused_windows_tmpfile}" "${esp_mountpath}/EFI/Puavo-defused-Windows.tar.gz"
    rm -rf "${esp_mountpath}/EFI/Microsoft" || return 1

    log info 'Windows defused.'
  else
    log info 'Nothing to do.'
  fi
}

esp_fix_windows() {
  local esp_mountpath

  esp_mountpath=$(esp_mount) || return 1

  if [ -f "${esp_mountpath}/EFI/Puavo-defused-Windows.tar.gz" ]; then
    log info 'Repriming Windows...'
    if [ -e  "${esp_mountpath}/EFI/Microsoft" ]; then
      log err "Failed to reprime Windows: '${esp_mountpath}/EFI/Microsoft' already exists"
      return 1
    fi
    tar -C "${esp_mountpath}/EFI" -z -x -f "${esp_mountpath}/EFI/Puavo-defused-Windows.tar.gz" || {
      rm -rf "${esp_mountpath}/EFI/Microsoft" || true
      return 1
    }
    rm -f "${esp_mountpath}/EFI/Puavo-defused-Windows.tar.gz" || return 1

    log info 'Windows reprimed.'
  else
    log info 'Nothing to do.'
  fi
}

efi_disable_windows() {
  if [ "$(puavo-conf puavo.grub.windows.defuse_efi_boot_when_disabled)" != 'true' ]; then
    log warning "puavo.grub.windows.defuse_efi_boot_when_disabled is not true, not disabling Windows EFI boot"
    return 0
  fi

  efibootmgr_windows -A || return 1
  esp_break_windows
}

efi_enable_windows() {
  esp_fix_windows || return 1
  efibootmgr_windows -a
}

has_efi() {
  grep -q '^efivarfs ' /proc/mounts
}

usage() {
  echo "Usage: $0 [OPTIONS] COMMAND"
  echo "       $0 --help"
}

usage_error() {
  local msg

  msg=$1
  shift

  echo "ERROR: ${msg}" >&2
  usage >&2

  exit 1
}

while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)
      shift
      {
        usage
        echo
        echo "Manage EFI boot. Modifies EFI boot order and ESP."
        echo
        echo "Commands:"
        echo "    disable-windows              disable Windows"
        echo "    enable-windows               enable Windows"
        echo
        echo "Options:"
        echo "    --no-efi-is-ok               exit with status 0 if the system does not use EFI"
        echo "    -h, --help                   print help and exit"
        echo
      } >&2
      exit 0
      ;;
    --no-efi-is-ok)
      shift
      g_no_efi_is_ok=true
      ;;
    --)
      shift
      break
      ;;
    -*)
      usage_error "invalid argument '$1'"
      ;;
    *)
      break
      ;;
  esac
done

if [ $# -ne 1 ]; then
  usage_error "invalid number of arguments ($#), expected 1"
fi

g_cmd=$1
shift

if ! has_efi; then
  if ${g_no_efi_is_ok}; then
    log warning "this system does not have EFI"
    exit 0
  else
    log err "this system does not have EFI"
    exit 1
  fi
fi

if [ "$(id -u)" -ne 0 ]; then
  echo 'You need to be root!' >&2
  exit 1
fi

exec {lockfd}<> "${PID_FILE}"
flock -x -n "${lockfd}" || {
  log err "puavo-manage-efi is already running!"
  exit 1
}

trap on_exit EXIT

echo "$$" >"${PID_FILE}"

case "${g_cmd}" in
  enable-windows)
    efi_enable_windows
    ;;
  disable-windows)
    efi_disable_windows
    ;;
  *)
    usage_error "invalid command '${g_cmd}'"
    ;;
esac

g_exitval=0
