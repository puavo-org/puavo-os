#!/bin/sh

set -eu

tmp_mountdir=''

# XXX code should be shared between this and puavo-install-grub
# XXX running puavo-install-grub should run this instead when needed

# This script is run on image updates from puavo-image-preinst so that only
# /images is writable!  (and some other pseudo-filesystems such as /dev and
# /proc are accessible as well).

log() {
  priority=$1
  message=$2

  printf "> %s\n" "$message" >&2

  logger -p "$priority" -t puavo-install-uki-grub "$message" || true
}

flush_caches() {
  # We have got some weird spurious grub errors of the sort (at first boot):
  # "error: ELF header smaller than expected", so we play it safe
  # and try weird tricks to flush all caches to actual, physical disk.
  # But we are not quite sure yet this will actually work (the problem is
  # difficult to reproduce).
  flush_status=0

  sync || flush_status=1
  echo 3 > /proc/sys/vm/drop_caches || flush_status=1

  for grubdev in "$@"; do
    blockdev --flushbufs "$grubdev" || flush_status=1
  done

  for grubdev in "$@"; do
    case "$grubdev" in
      /dev/[sv]d*)
	hdparm -qF "$grubdev" || flush_status=1
	;;
    esac
  done

  return $flush_status
}

get_grub_efi_arguments() {
  local vgname
  vgname=$1

  echo --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=debian \
       --uefi-secure-boot

  if [ "$vgname" = 'puavoinstaller' ]; then
    echo '--removable'
  elif [ "$(puavo-conf puavo.grub.efi.force_extra_removable)" = 'true' ]; then
    echo '--force-extra-removable'
  fi
}

get_system_images() {
  local img
  (
    cd /images
    for img in *.img; do
      test "$img" = 'ltsp.img'        && continue
      test "$img" = 'ltsp-backup.img' && continue
      printf "%s\n" "$img"
    done
  )
}

# XXX the output of this function should be dependent on EFI partition
# XXX (EFI UUID should be used here)
grub_m4_template() {
  # XXX this should not use loopback

  cat <<'GRUB_CFG_EOF'
set default="0"
load_env

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if loadfont unicode ; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  insmod gettext
fi
terminal_output gfxterm

if keystatus --shift; then
  set timeout=-1
else
  if test -n "$puavo_grub_timeout"; then
    set timeout="$puavo_grub_timeout"
  else
    set timeout=5
  fi
fi

function get_imagename { regexp -s 2:"$2" '^(\(.*\)/)?(.*)$' "$1"; }
function get_pathname  { regexp -s 2:"$2" '^(\(.*\))?(/.*)$' "$1"; }

function get_puavoimage_release_name {
  set imagefile="$1"

  set __puavoimage_release_name=""
  set puavoimage_release_name=""

  loopback image "$imagefile"
  load_env --file (image)/boot/grub/puavoimage_grubenv --skip-sig __puavoimage_release_name
  set puavoimage_release_name="${__puavoimage_release_name}"
  loopback -d image
}

function ltsp_image_entry {
  set imagefile="$1"
  set description="$2"
  set kernelparameters="$3"
  set boottype="$4"
  set image_alias="$5"
  set entry_os_icon="$6"

  get_imagename $image_alias image_alias_path
  get_pathname $imagefile imagepath

  # ${puavo_kernel_arguments} comes from a grub environment file
  # (if it is defined there)
  set kernelparameters="${kernelparameters} ${puavo_kernel_arguments}"
  if test "$boottype" = "liveboot"; then
    set kernelparameters="${kernelparameters} puavo.hosttype=laptop puavo.guestlogin.enabled=true"
  fi

  get_puavoimage_release_name "$imagefile"
  if test -n "$puavoimage_release_name"; then
    set boot_label="${description} (${puavoimage_release_name})"
  else
    set boot_label="${description} (${image_alias_path})"
  fi

  if test "$imagepath" = "/${puavo_grub_puavo_os_default_image}" \
       -a "$boottype" = "$puavo_grub_puavo_os_default_mode"; then
    set default="${boot_label}"
  fi

  menuentry "${boot_label}" --class="$entry_os_icon" "$imagefile" "$imagepath" "$kernelparameters" {
    set kernel_version=''
    # --- remove "#" from the following if you need another kernel ---
    # set kernel_version='default'
    # set kernel_version='recent'

    set imagefile="$2"
    set imagepath="$3"
    set kernelparameters="$4"

    search --no-floppy --fs-uuid --set=root __PUAVO_EFI_PARTUUID__
    chainloader /EFI/PuavoOS/${image_alias_path}/__PUAVO_UKI_VMLINUZ__ ro init=/sbin/init-puavo __PUAVO_KERNEL_ARGUMENTS__ ${kernelparameters}
  fi
}

## Superlaptop mode = persistent image changes + local admins
function ltsp_image_entry_superlaptop {
  set imagefile="$1"
  set description="$2"
  set kernelparameters="$3"
  set image_alias="$4"
  set entry_superlaptop_os_icon="$5"

  if test "${puavo_show_imageoverlays}" = "true" \
            -a -d (lvm/puavo-imageoverlays); then
    set kernelparameters="$kernelparameters puavo.image.overlay=personal"

    ltsp_image_entry "${imagefile}" "${description}" "${kernelparameters}" "developer" "${image_alias}" "${entry_superlaptop_os_icon}"
  fi
}

insmod biosdisk
insmod ext2
insmod gzio
insmod jpeg
insmod loopback
insmod lvm
insmod ntfs
insmod part_msdos
insmod png
insmod regexp
insmod squash4
insmod usb_keyboard

for dev in (lvm/__PUAVO_LVM_PARTITION__); do
  for file in ${dev}/*.default; do
    regexp -s default_alias_no_suffix '^(.*)\.default$' "${file}"
    break
  done
  for file in ${dev}/*.backup; do
    regexp -s backup_alias_no_suffix '^(.*)\.backup$' "${file}"
    break
  done

  set default_image="${dev}/ltsp.img"
  set backup_image="${dev}/ltsp-backup.img"
  set default_image_alias="${default_alias_no_suffix}.img"
  set backup_image_alias="${backup_alias_no_suffix}.img"

  # Include optional grub configurations from the default image.
  loopback image "$default_image"
  if test -z "${puavo_optional_grub_conf}"; then
    set puavo_optional_grub_conf="default"
  fi
  if test -e "(image)/boot/grub/puavo/${puavo_optional_grub_conf}.cfg"; then
    source "(image)/boot/grub/puavo/${puavo_optional_grub_conf}.cfg"
  fi
  loopback -d image

  # These might come from optional Grub configurations above,
  # so check if text_normal_startup is already set before setting these.
  # Note that some day we might drop the translations from here,
  # but should keep some fallback strings (in English) just in case
  # the optional configurations are missing from the default image.
  if test -z "$text_normal_startup"; then
    if test "$lang" = "de_CH.UTF-8" -o "$lang" = "de_DE.UTF-8"; then
      set text_normal_startup="Normaler Start"
      set text_liveboot_startup="Liveboot-Start"
      set text_developer_mode="Entwicklermodus"
      set text_backup_normal_startup="Backup-System, normaler Start"
      set text_backup_developer_mode="Backup-System, Entwicklermodus"
      set text_other_system_normal_startup="Anderes System, normaler Start"
      set text_other_system_developer_mode="Anderes System, Entwicklermodus"
    elif test "$lang" = "fi_FI.UTF-8"; then
      set text_normal_startup="Normaali käynnistys"
      set text_liveboot_startup="Liveboot-käynnistys"
      set text_developer_mode="Kehittäjätila"
      set text_backup_normal_startup="Varajärjestelmä, normaali käynnistys"
      set text_backup_developer_mode="Varajärjestelmä, kehittäjätila"
      set text_other_system_normal_startup="Muu järjestelmä, normaali käynnistys"
      set text_other_system_developer_mode="Muu järjestelmä, kehittäjätila"
    elif test "$lang" = "fr_CH.UTF-8"; then
      set text_normal_startup="Démarrage normal"
      set text_liveboot_startup="Démarrage live"
      set text_developer_mode="Mode développeur"
      set text_backup_normal_startup="Système de secours, démarrage normal"
      set text_backup_developer_mode="Système de secours, mode développeur"
      set text_other_system_normal_startup="Autre système, démarrage normal"
      set text_other_system_developer_mode="Autre système, mode développeur"
    elif test "$lang" = "sv_FI.UTF-8"; then
      set text_normal_startup="Normal start"
      set text_liveboot_startup="Start av liveboot"
      set text_developer_mode="Utvecklarläge"
      set text_backup_normal_startup="Backup-system, normal start"
      set text_backup_developer_mode="Backup-system, utvecklarläge"
      set text_other_system_normal_startup="Annat system, normal start"
      set text_other_system_developer_mode="Annat system, utvecklarläge"
    else
      set text_normal_startup="Normal startup"
      set text_liveboot_startup="Liveboot startup"
      set text_developer_mode="Developer mode"
      set text_backup_normal_startup="Backup system, normal startup"
      set text_backup_developer_mode="Backup-system, developer mode"
      set text_other_system_normal_startup="Other system, normal startup"
      set text_other_system_developer_mode="Other system, developer mode"
    fi
  fi

  if test -z "$windows_boot_label"; then
    set windows_boot_label="Windows"
  fi

  set os_icon="puavo-os"

  if test -f "${default_image}"; then
    ltsp_image_entry "${default_image}" "${text_normal_startup}" "" "normal" "${default_image_alias}" "${os_icon}"
    if test "__PUAVO_LIVEBOOT_OPTION__" = "true"; then
      ltsp_image_entry "${default_image}" "${text_liveboot_startup}" "" "liveboot" "${default_image_alias}" "${os_icon}"
    fi
    ltsp_image_entry_superlaptop "${default_image}" "${text_developer_mode}" "" "${default_image_alias}" "${os_icon}-devel"

    loopback default_image_loop "${default_image}"
    set possible_puavo_grub_theme_path="(default_image_loop)/boot/grub/themes/${puavo_grub_theme}/theme.txt"
    if test -f "${possible_puavo_grub_theme_path}"; then
      set theme="${possible_puavo_grub_theme_path}"
    fi
  fi
  if test -f "${backup_image}"; then
    ltsp_image_entry "${backup_image}" "${text_backup_normal_startup}" "" "normal" "${backup_image_alias}" "${os_icon}-backup"
    ltsp_image_entry_superlaptop "${backup_image}" "${text_backup_developer_mode}" "" "${backup_image_alias}" "${os_icon}-devel"
  fi

  for file in ${dev}/*.img; do
    if test "${file}" = "${default_image}";       then continue; fi
    if test "${file}" = "${backup_image}";        then continue; fi
    if test "${file}" = "${default_image_alias}"; then continue; fi
    if test "${file}" = "${backup_image_alias}";  then continue; fi

    ltsp_image_entry "${file}" "${text_other_system_normal_startup}" "" "normal" "${file}" "${os_icon}-backup"
    ltsp_image_entry_superlaptop "${file}" "${text_other_system_developer_mode}" "" "${file}" "${os_icon}-devel"
  done
done
GRUB_CFG_EOF
}

# also in puavo-list-install-devices
get_efi_devpath() {
  local diskdev lsblk_output
  diskdev=$1
  lsblk_output=$(lsblk -n -l -o PATH,PARTTYPE "$diskdev") || return 1
  # c12a7328-f81f-11d2-ba4b-00a0c93ec93b == EFI partition type
  printf "$lsblk_output" | awk '
    $2 == "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" { print $1; exit(0) }
  '
}

has_bios_boot_partition() {
  local diskdev
  diskdev=$1
  # 21686148-6449-6e6f-744e-656564454649 == BIOS boot partition type
  lsblk -n -l -o PARTTYPE "$diskdev" \
    | awk '
        BEGIN { status = 1 }
        $1 == "21686148-6449-6e6f-744e-656564454649" { status = 0 }
        END { exit(status) }
      '
}

lookup_efi_partition_uuid() {
  local diskdev
  diskdev=$1

  lsblk -n -l -o PARTTYPE,UUID "$diskdev" \
    | awk '
        BEGIN { efi_uuid = "" }
        $1 == "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" && $2 ~ /^[a-zA-Z0-9-]+$/ {
          efi_uuid = $2
        }
        END {
          if (efi_uuid != "") { print efi_uuid } else { exit(1) }
        }
      '
}

lookup_windows_boot_partition() {
  local diskdev
  diskdev=$1

  # "ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" is Windows partition type.
  # Restrict this check to $diskdev only, so that possible matching
  # partitions in external drives do not mess up Windows boot.
  # It might be nice to support dual boot with a separate disk for Windows,
  # but this does do not do that.
  lsblk -n -l -o PARTTYPE,UUID "$diskdev" \
    | awk '
        BEGIN { efi_uuid = ""; legacy_uuid = ""; has_windows = 0 }
        $1 == "0x7" {
          has_windows = 1
          if (!legacy_uuid) { legacy_uuid = $2 }
        }
        $1 == "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" { efi_uuid = $2 }
        $1 == "ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" { has_windows = 1 }
        END {
          if (has_windows) {
            if (efi_uuid && efi_uuid ~ /^[a-zA-Z0-9-]+$/) {
              print efi_uuid
            } else if (legacy_uuid && legacy_uuid ~ /^[a-zA-Z0-9-]+$/) {
              print legacy_uuid
            }
          }
        }
      '
}

lookup_windows_chainloader() {
  local diskdev efi_devpath
  diskdev=$1
  efi_devpath=$(get_efi_devpath "$diskdev")
  if [ -n "$efi_devpath" ]; then
    echo '/EFI/Microsoft/Boot/bootmgfw.efi'
  else
    echo '+1'
  fi
}

usage() {
  cat <<EOF
$(basename $0) [optional arguments]

  $(basename $0) takes the following optional arguments:

    --hosttype           hosttype
    --images-dir         imagesdir
    --only-update-config
    --vgname             vgname
EOF
  exit 1
}

exitstatus=0

hosttype=$(cat /etc/puavo/hosttype 2>/dev/null || true)
images_dir=/images
only_update_config=false
vgname=puavo

if ! args=$(getopt -n "$0" -o +                                                              \
                   -l 'hosttype:,images-dir:,only-update-config,vgname:' \
                   -- "$@"); then
  usage
fi

eval "set -- $args"
while [ $# -ne 0 ]; do
  case "$1" in
    --hosttype)           hosttype=$2;              shift; shift ;;
    --images-dir)         images_dir=$2;            shift; shift ;;
    --only-update-config) only_update_config=true;  shift        ;;
    --vgname)             vgname=$2;                shift; shift ;;
    --) shift; break ;;
    *)  usage ;;
  esac
done

[ $# -eq 0 ] || usage

log notice 'starting to update Grub'

if ! grub_target_devices=$(
  /usr/lib/puavo-ltsp-install/puavo-list-install-devices \
    --vgname "$vgname"); then
  log err "error looking up grub target devices for '${vgname}'"
  exit 1
fi
if ! possible_windows_disk_dev=$(
  /usr/lib/puavo-ltsp-install/puavo-list-install-devices \
    --vgname "$vgname" --windows); then
  log err 'error looking up a possible Windows device'
  exit 1
fi

if [ ! -d "$images_dir" ]; then
  log err "'${images_dir}' is not a directory"
  exit 1
fi

if [ -z "$hosttype" ]; then
  log err 'hosttype is not set'
  exit 1
fi

# XXX do not install boot information under /images anymore
boot_dir="${images_dir}/boot"

if [ "$hosttype" = 'diskinstaller' ]; then
  puavo_liveboot_option='true'
  puavo_lvm_partition='puavoinstaller-installimages'
else
  puavo_liveboot_option='false'
  puavo_lvm_partition='puavo-images'
fi

# loop= parameter is legacy and is meant for the old Trusty-based Puavo-systems.
common_kernel_arguments="puavo.hosttype=${hosttype} root=/dev/mapper/${puavo_lvm_partition} loop=\"\${imagepath}\" puavo.image.path=\"\${imagepath}\""

case "$hosttype" in
  bootserver|diskinstaller|preinstalled|wirelessaccesspoint)
    puavo_kernel_arguments="nosplash ${common_kernel_arguments}"
    ;;
  laptop)
    puavo_kernel_arguments="quiet loglevel=3 splash ${common_kernel_arguments}"
    ;;
  *)
    log err "hosttype '${hosttype}' is not supported"
    exit 1
    ;;
esac

mount_efi_partition() {
  local efi_devpath
  efi_devpath=$1

  mountpoint -q /boot/efi && return 0

  mount "$efi_devpath" /boot/efi || return 1
}

install_legacy_grub() {
  local boot_dir grubdev

  boot_dir=$1
  grubdev=$2

  if ! grub_msg=$(grub-install --boot-directory="$boot_dir" \
                    --target=i386-pc "$grubdev" 3>&- 4>&- 5>&- 2>&1); then
    log err "Grub (MBR) installation to ${grubdev} failed: ${grub_msg}"
    return 1
  fi

  log info "Grub (MBR) installation to ${grubdev} was OK."

  return 0
}

install_efi_grub() {
  local boot_dir efi_devpath grubdev grub_efi_arguments vgname

  boot_dir=$1
  efi_devpath=$2
  grubdev=$3
  vgname=$4

  if ! mount_efi_partition "$efi_devpath"; then
    log err "could not mount /boot/efi from ${efi_devpath}"
    return 1
  fi

  # XXX here we should probably setup everything else in EFI partition
  # XXX (UKI kernels, configurations and such)

  # We might actually have leftover nvram dumps from previous installations
  # that prevent a successful bootloader installation. Clean them up first.
  rm -f /sys/firmware/efi/efivars/dump-*

  grub_efi_arguments=$(get_grub_efi_arguments "$vgname")
  if ! grub_msg=$(grub-install --boot-directory="$boot_dir" \
                    $grub_efi_arguments "$grubdev" \
                    3>&- 4>&- 5>&- 2>&1); then
    log err "Grub (UEFI) installation to ${grubdev} failed: ${grub_msg}"
    umount /boot/efi || true
    return 1
  fi
  umount /boot/efi || true

  log info "Grub (UEFI) installation to ${grubdev} was OK."

  return 0
}

cleanup_unused_bootconfs() {
  local efidir imgdir_path system_images
  efidir=$1
  system_images=$2

  for imgdir_path in ${efidir}/EFI/PuavoOS/*; do
    test -d "$imgdir_path" || continue
    rm -f ${imgdir_path}/*.tmp
    img=${imgdir_path##*/}
    if printf "%s\n" "$system_images" | grep -Fq "$img"; then
      # this is something we want to keep
      continue
    fi
    rm -rf "$imgdir_path"
  done
}

write_grub_cfg_file() {
  local grub_cfg_path grub_template puavo_efi_partuuid vmlinuz_name \
        windows_boot_partition windows_chainloader windows_partition_path

  grub_cfg_path=$1
  tmp_grub_cfg_path="${grub_cfg_path}.tmp"

  if ! puavo_efi_partuuid=$(lookup_efi_partition_uuid "$grubdev"); then
    log err "but could not lookup EFI partition UUID:for ${grubdev}"
    return 1
  fi

  # XXX perhaps Grub configuration should only read image specific
  # XXX Grub environment files and there would container information
  # XXX about image kernel versions and other such configurations?

  # XXX UFI boots should support kernel choices as well.
  # XXX Also, this looks up the default kernel of the current image
  # XXX where Grub is installed.  This is quite possibly wrong for
  # XXX the backup image.
  vmlinuz_name=$(readlink /boot/vmlinuz 2>/dev/null) || true
  if [ -z "$vmlinuz_name" ]; then
    log err 'could not determine the default kernel'
    return 1
  fi

  if ! grub_template=$(grub_m4_template); then
    log err 'error creating Grub configuration template'
    return 1
  fi

  if ! printf "%s\n" "$grub_template" \
    | m4 -D__PUAVO_EFI_PARTUUID__="$puavo_efi_partuuid"         \
         -D__PUAVO_KERNEL_ARGUMENTS__="$puavo_kernel_arguments" \
         -D__PUAVO_LIVEBOOT_OPTION__="$puavo_liveboot_option"   \
         -D__PUAVO_LVM_PARTITION__="$puavo_lvm_partition"       \
         -D__PUAVO_UKI_VMLINUZ__="${vmlinuz_name}.unsigned.efi" \
    > "$tmp_grub_cfg_path"; then
      log err "could not write  /boot/efi from ${efi_devpath}"
      umount /boot/efi || true
      return 1
  fi

  windows_partition_path=/images/boot/.puavo_windows_partition
  if [ -n "$possible_windows_disk_dev" ]; then
    windows_boot_partition=$(
      lookup_windows_boot_partition "$possible_windows_disk_dev") || return 1
    windows_chainloader=$(lookup_windows_chainloader \
                            "$possible_windows_disk_dev") || return 1
    if [ -n "$windows_boot_partition" -a -n "$windows_chainloader" ]; then
      printf "%s %s\n" "$windows_boot_partition" "$windows_chainloader" \
        > "${windows_partition_path}.tmp" || return 1
      mv "${windows_partition_path}.tmp" "$windows_partition_path" || return 1

      cat <<EOF >> "$tmp_grub_cfg_path" || return 1

if test "\${puavo_grub_windows_enabled}" = "true"; then
  menuentry --class="windows" "\${windows_boot_label}" {
    search --no-floppy --fs-uuid --set=root ${windows_boot_partition}
    chainloader ${windows_chainloader}
  }
  if test "\${puavo_grub_boot_default}" = "windows"; then
    set default="\${windows_boot_label}"
  fi
fi
EOF
    else
      rm -f "$windows_partition_path" || return 1
    fi
  else
    rm -f "$windows_partition_path" || return 1
  fi

  if cmp "$grub_cfg_path" "$tmp_grub_cfg_path" >/dev/null 2>&1; then
    log info 'no changes to Grub configuration'
    rm -f "$tmp_grub_cfg_path" || return 1
  else
    mv "$tmp_grub_cfg_path" "$grub_cfg_path" || return 1
    log notice 'new Grub configuration has been installed'
    if ! flush_caches; then
      log warn 'error in flushing caches after updating grub configuration'
    fi
  fi

  return 0
}

setup_grubenv_for_image() {
  local target_dir vmlinuz
  vmlinuz=$1
  target_dir=$2

  grub_envfile="${target_dir}/grubenv"
  grub-editenv "$grub_envfile" create "$grub_envfile"               || return 1
  grub-editenv "$grub_envfile" set puavo_default_vmlinuz="$vmlinuz" || return 1

  return 0
}

install_uki_for_image() {
  local grub_envfile image initrd target_dir tmp_target_dir vmlinuz

  vmlinuz=$1
  image=$2

  target_dir="${tmp_mountdir}/efi/EFI/PuavoOS/${image}"

  if [ -e "$target_dir" ]; then
    # nothing to do
    # XXX BUT what if a newer version of puavo-install-uki-grub does something
    # XXX differently and we should recreate the files here?
    return 0
  fi

  initrd="initrd.img-${vmlinuz#vmlinuz-}"
  tmp_target_dir="${target_dir}.tmp"

  rm -rf "$tmp_target_dir"
  mkdir -p "$tmp_target_dir" || return 1

  # XXX cmdline depends on context (for example bootserver vs laptop)
  if ! /usr/lib/systemd/ukify build \
    --linux "${tmp_mountdir}/image/boot/${vmlinuz}" \
    --initrd "${tmp_mountdir}/image/boot/${initrd}" \
    --cmdline 'ro init=/sbin/init-puavo quiet loglevel=3 splash puavo.hosttype=laptop root=/dev/mapper/puavo-images loop=/ltsp.img puavo.image.path=/ltsp.img' \
    --output "${tmp_target_dir}/${vmlinuz}.unsigned.efi" >/dev/null; then
      rm -rf "$tmp_target_dir"
      return 1
  fi

  if ! setup_grubenv_for_image "$vmlinuz" "$tmp_target_dir"; then
    log err "could not setup Grub environment for ${image}"
    rm -rf "$tmp_target_dir"
    return 1
  fi

  sync || true
  if ! mv "$tmp_target_dir" "$target_dir" 2>/dev/null; then
    log err "could not rename ${image} configurations dir"
    rm -rf "$tmp_target_dir"
    return 1
  fi
  sync || true

  return 0
}

install_all_ukis_for_image() {
  local all_status efidir vmlinux_path
  efidir=$1
  image=$2

  all_status=0

  mkdir -p "${tmp_mountdir}/image" || return 1
  mount -o ro "/images/${image}" "${tmp_mountdir}/image" || return 1
  for vmlinuz_path in ${tmp_mountdir}/image/boot/vmlinuz-*; do
    test ! -h "$vmlinuz_path" || continue
    vmlinuz=${vmlinuz_path##*/}
    install_uki_for_image "$vmlinuz" "$image" || all_status=1
  done
  umount "${tmp_mountdir}/image" || return 1

  return $all_status
}

install_ukis() {
  local efidir efi_status img system_images
  efidir=$1
  system_images=$2

  efi_status=0

  for img in $system_images; do
    install_all_ukis_for_image "$efidir" "$img" || efi_status=1
  done

  return $efi_status
}

setup_efi() {
  local efidir grubdev system_images
  efidir=$1
  system_images=$2
  grubdev=$3

  if ! cleanup_unused_bootconfs "$efidir" "$system_images"; then
    log err "error cleaning up unused boot configurations on ${grubdev}"
    return 1
  fi

  if ! install_ukis "$efidir" "$system_images"; then
    log err "error in installing UKI kernels to ${grubdev}"
    return 1
  fi

  grub_cfg_path="${efidir}/grub.cfg"
  if ! write_grub_cfg_file "$grub_cfg_path"; then
    log err "could not write grub configuration to ${grubdev}"
    return 1
  fi

  return 0
}

setup_boot_to_grubdev() {
  local efi_devpath grubdev grub_cfg_path system_images setup_efi_status

  grubdev=$1
  system_images=$2

  setup_efi_status=0

  if ! efi_devpath=$(get_efi_devpath "$grubdev") || [ -z "$efi_devpath" ]; then
    log err "could not lookup EFI path for ${grubdev}"
    return 1
  fi

  if ! mkdir -p "${tmp_mountdir}/efi"; then
    log err "error mkdir ${tmp_mountdir}/efi"
    return 1
  fi

  fsck.fat -a "$efi_devpath" > /dev/null 2>&1 || true
  if ! mount "$efi_devpath" "${tmp_mountdir}/efi"; then
    log err "error mounting ${efi_devpath}"
    return 1
  fi

  if ! setup_efi "${tmp_mountdir}/efi" "$system_images" "$grubdev"; then
    log err "error on operating to EFI partition ${efi_devpath}"
    setup_efi_status=1
  fi

  umount "${tmp_mountdir}/efi" || true

  return $setup_efi_status
}

cleanup() {
  if [ -n "$tmp_mountdir" ]; then
    rm --one-file-system -rf "$tmp_mountdir" || true
  fi
}

trap cleanup 0 INT TERM

tmp_mountdir=$(mktemp -d /tmp/puavo-install-uki-grub.XXXXXX)

system_images=$(get_system_images)

grub_install_done=false

if $only_update_config; then
  log info 'only updating Grub configuration'
else
  for grubdev in $grub_target_devices; do
    log info "installing grub to ${grubdev}"

    grub_install_attempted=false

    if has_bios_boot_partition "$grubdev"; then
      grub_install_attempted=true
      if ! install_legacy_grub "$boot_dir" "$grubdev"; then
        exit 1
      fi
    fi

    efi_devpath=$(get_efi_devpath "$grubdev")
    if [ -n "$efi_devpath" ]; then
      grub_install_attempted=true
      if ! install_efi_grub "$boot_dir" "$efi_devpath" "$grubdev" \
                            "$vgname"; then
        exit 1
      fi
    fi

    if ! $grub_install_attempted; then
      # Must be a legacy Grub installation in case neither bios boot
      # partition nor EFI-partition was found.  Thus, we must try this:
      if ! install_legacy_grub "$boot_dir" "$grubdev"; then
        exit 1
      fi
    fi

    log info "Grub installation to ${grubdev} was successful"
  done

  grub_install_done=true

  if ! flush_caches; then
    log warn 'error in flushing caches after grub installation'
  fi

  new_grub_version=$(grub-install --version | awk '{ print $3 }')
  if [ -z "$new_grub_version" ]; then
    log err 'could not determine new grub version'
    exitstatus=1
  else
    printf "%s\n" "$new_grub_version" > "${boot_dir}/grub/version.tmp"
    mv "${boot_dir}/grub/version.tmp" "${boot_dir}/grub/version"
    log notice "Grub version ${new_grub_version} has been installed to: $(printf %s "$grub_target_devices")"
  fi
fi

for grubdev in $grub_target_devices; do
  if ! setup_boot_to_grubdev "$grubdev" "$system_images"; then
    log err "error setting up boot files to ${grubdev}"
    exitstatus=1
  fi
done

if $grub_install_done; then
  # Do an extra sleep in case we really installed grub (and have not only
  # updated the configuration), in case cache flushing was not adequate.
  sleep 5 || true
fi

exit $exitstatus
