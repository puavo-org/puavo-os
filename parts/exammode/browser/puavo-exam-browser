#!/usr/bin/python3

import gettext
import json
import os
import signal
import sys
import syslog

import gi
# gi.require_version('Gdk', '4.0')
gi.require_version('Gtk', '4.0')
gi.require_version('WebKit', '6.0')
# from gi.repository import Gdk, Gtk, WebKit
from gi.repository import Gtk, WebKit

gettext.bindtextdomain('puavo-exam-browser', '/usr/share/locale')
gettext.textdomain('puavo-exam-browser')
_tr = gettext.gettext

CSS = b"""
#closing_dialog {
  font-size: 200%;
}

#request_uri {
  font-size: 200%;
}
"""

ICON_PATH = '/usr/share/icons/oxygen/base/64x64/actions/document-edit.png'

style_provider = Gtk.CssProvider()
style_provider.load_from_data(CSS)

# Gtk.StyleContext.add_provider_for_screen(
#     Gdk.Screen.get_default(),
#     style_provider,
#     Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION,
# )


class UriRequestDialog():
  def __init__(self, exam_browser):
    self.exam_browser = exam_browser


  def setup(self):
    self.alignment = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0, name='request_uri')
    self.vbox = Gtk.Box()
    self.address_label = Gtk.Label.new(_tr('Exam server:'))
    self.address_entry = Gtk.Entry()
    self.address_entry.set_width_chars(40)
    self.address_entry.connect('activate', self.on_change_uri)
    self.go_button = Gtk.Button.new_with_label(_tr('Go'))
    self.go_button.connect('clicked', self.on_change_uri)

    self.vbox.pack_start(self.address_label, False, False, 10)
    self.vbox.pack_start(self.address_entry, False, False, 10)
    self.vbox.pack_start(self.go_button,     False, False, 10)
    self.alignment.add(self.vbox)

    self.exam_browser.win.add(self.alignment)
    # XXX self.exam_browser.win.show_all()


  def on_change_uri(self, widget):
    server = self.address_entry.get_text()
    self.exam_browser.try_server(server)


  def remove(self):
    self.alignment.destroy()


class PuavoExamBrowser():
  BROWSER_DIR = os.path.join(os.environ['HOME'], '.puavo', 'puavo-exam-browser')
  STATE_PATH  = os.path.join(BROWSER_DIR, 'state.json')

  # I liked the math of musical tunings as a kid.
  ZOOM_LEVELS = [
    1/2, 9/16, 5/8, 5/7, 4/5, 8/9,
    1,   9/8,   5/4,   7/5,   8/5,   16/9,
    2, 2*9/8, 2*5/4, 2*7/5, 2*8/5, 2*16/9, 4,
  ]

  def __init__(self, cmdline_server):
    os.makedirs(self.BROWSER_DIR, exist_ok=True)

    self.app = Gtk.Application()
    self.app.connect('activate', self.on_activate)

    self.cmdline_server = cmdline_server
    self.server = None
    self.server_candidate = None
    self.zoom_level_index = 6
    self.load_state()


  def load_state(self):
    try:
      with open(self.STATE_PATH) as f:
        config = json.load(f)
      if 'server' in config and type(config['server']) == str:
        self.server = config['server']
    except Exception as e:
      syslog.syslog(syslog.LOG_ERR, 'could not load state: %s' % e)


  def save_state(self):
    try:
      data = { 'server': self.server }
      tmpfile = '%s.tmp' % self.STATE_PATH
      with open(tmpfile, 'w') as f:
        json.dump(data, f)
      os.rename(tmpfile, self.STATE_PATH)
    except Exception as e:
      syslog.syslog(syslog.LOG_ERR, 'could not save state: %s' % e)


  def set_window_size(self):
    # XXX
    return
    screen = self.win.get_screen()
    height = screen.get_height()
    width = screen.get_width()
    self.win.set_size_request(640, 480)
    self.win.set_default_size(width, height)


  def setup_ui(self):
    self.win = Gtk.ApplicationWindow(application=self.app)

    if self.cmdline_server:
      server = self.cmdline_server
    else:
      server = self.server

    # XXX how to quit in Gtk4 ?  (main_quit is no more)
    # self.win.connect('destroy', Gtk.main_quit)

    self.set_window_size()
    self.win.set_title(_tr('Puavo Exam Browser'))
    # XXX self.win.set_position(Gtk.WindowPosition.CENTER)
    # XXX self.win.set_icon_from_file(ICON_PATH)

    self.is_fullscreen = False

    # XXX self.win.connect('delete-event', self.on_delete)
    # XXX self.win.connect('key-press-event', self.on_keypress)
    # XXX self.win.connect('window-state-event', self.on_window_state)

    self.list_of_uris_to_try = []

    self.webview = WebKit.WebView()
    self.disable_cert_checks()  # XXX perhaps not okay?
    self.webview.connect('authenticate', self.on_authenticate)
    self.webview.connect('load-changed', self.on_load_changed)
    self.webview.connect('load-failed',  self.on_load_failed)

    self.load_failed        = True
    self.uri_request_dialog = None
    self.webview_shown      = False

    if server:
      self.try_server(server)
    else:
      self.uri_request_dialog = UriRequestDialog(exam_browser)
      self.uri_request_dialog.setup()

    self.win.present()


  def on_delete(self, widget, event):
    dialog = Gtk.MessageDialog(
      transient_for=self.win,
      flags=0,
      message_type=Gtk.MessageType.QUESTION,
      buttons=Gtk.ButtonsType.YES_NO,
      text=_tr('Are you sure you want to close?'),
      name='closing_dialog')

    dialog.format_secondary_text(_tr('To exit the exam use the menu on the right of the bottom panel.'))
    response = dialog.run()
    dialog.destroy()
    return (response == Gtk.ResponseType.NO)


  def adjust_zoom(self, is_plus):
    if not self.webview_shown:
      return

    if is_plus:
      next_zoom_level_index = self.zoom_level_index + 1
    else:
      next_zoom_level_index = self.zoom_level_index - 1

    if next_zoom_level_index < 0 or len(self.ZOOM_LEVELS) <= next_zoom_level_index:
      return

    self.zoom_level_index = next_zoom_level_index
    self.webview.set_zoom_level(self.ZOOM_LEVELS[ self.zoom_level_index ])


  def on_keypress(self, widget, event):
    # key = Gdk.keyval_name(event.keyval)
    return
    # has_control = (event.state & Gdk.ModifierType.CONTROL_MASK)

    if has_control and key == 'plus':
      self.adjust_zoom(True)
      return True
    if has_control and key == 'minus':
      self.adjust_zoom(False)
      return True
    if key == 'Escape':
      self.win.unfullscreen()
      return True
    if key == 'F11':
      if self.is_fullscreen:
        self.win.unfullscreen()
      else:
        self.win.fullscreen()
      return True

    return False


  def on_window_state(self, widget, event):
    return
    # self.is_fullscreen \
    #   = bool(event.new_window_state & Gdk.WindowState.FULLSCREEN)
    # return True


  def try_server(self, server):
    self.server_candidate = server

    if server.startswith('http://') or server.startswith('https://'):
      self.list_of_uris_to_try = [ server ]
    else:
      self.list_of_uris_to_try = [
        'https://%s' % server,
        'http://%s'  % server,
      ]

    self.try_next_uri()


  def try_next_uri(self):
    if len(self.list_of_uris_to_try) == 0:
      return

    next_uri, *self.list_of_uris_to_try = self.list_of_uris_to_try

    self.load_failed = False
    self.webview.load_uri(next_uri)


  def on_authenticate(self, webview, auth_request):
    # If we get an authentication reqwest on this particular realm,
    # we know we should be using port 8010 with https instead.
    # This text "Koetilan palvelin" should *not* be translated here,
    # it is used to identify a particular type of (Finnish) exam server.
    if auth_request.get_realm() == 'Koetilan palvelin':
      abitti_uri = 'https://%s:8010' % '10.249.14.227' # auth_request.get_host()
      self.list_of_uris_to_try = [ abitti_uri ]
      self.webview.stop_loading()

    return True


  def on_load_failed(self, widget, load_event, failing_uri, error):
    self.load_failed = True
    return True


  def on_load_changed(self, widget, load_event):
    if load_event != WebKit.LoadEvent.FINISHED:
      return True

    if self.load_failed:
      self.try_next_uri()
      return True

    if self.uri_request_dialog:
      self.uri_request_dialog.remove()
      self.uri_request_dialog = None

    if not self.webview_shown:
      self.win.set_child(self.webview)
      # XXX self.win.show_all()
      self.webview_shown = True

    self.server = self.server_candidate
    self.save_state()

    return True


  def disable_cert_checks(self):
    network_session = self.webview.get_network_session()
    network_session.set_tls_errors_policy(WebKit.TLSErrorsPolicy.IGNORE)


  def on_activate(self, app):
    try:
      exam_browser.setup_ui()
    except Exception as e:
      syslog.syslog(syslog.LOG_ERR, 'unexpected error during application setup: %s' % e)
      # XXX you should you just quit here?
      raise e

    return


  def run(self, server):
    self.app.run()


exitstatus = 0

syslog.openlog('puavo-exam-browser')

server = None
if len(sys.argv) == 2:
    server = sys.argv[1]

try:
  signal.signal(signal.SIGINT, signal.SIG_DFL)
  exam_browser = PuavoExamBrowser(server)
  exam_browser.run(None)
except Exception as e:
  syslog.syslog(syslog.LOG_ERR, 'unexpected error: %s' % e)
  exitstatus = 1

syslog.closelog()

sys.exit(exitstatus)
