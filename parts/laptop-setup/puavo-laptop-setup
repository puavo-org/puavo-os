#!/usr/bin/python3

import fcntl
import gettext
import gi
import json
import os
import re
import subprocess
import sys
import threading

gi.require_version('Gtk', '3.0')
from gi.repository import GLib, GObject, Gtk

gettext.bindtextdomain('puavo-laptop-setup', '/usr/share/locale')
gettext.textdomain('puavo-laptop-setup')
_tr = gettext.gettext

def puavoconf_get(puavoconf_key):
    # We do this first to see if we get an error... if this puavo-conf
    # key does not exist, this raises an exception.
    default_value = subprocess.check_output([ 'puavo-conf', puavoconf_key ]) \
                              .rstrip().decode('utf-8')
    try:
        with open('/state/etc/puavo/local/puavo_conf.json') as file:
            conf = json.load(file)
        return conf[puavoconf_key]
    except:
        # Fallback value from puavo-conf if local value could not be read.
        return default_value


def strip_abitti_v(value):
    if value.startswith('abitti-v'):
        return value.replace('abitti-v', '')
    return value


class PuavoLaptopSetup:
    def __init__(self, app_window, builder):
        self.app_window = app_window
        self.builder = builder
        self.puavo_conf = {
            'puavo.abitti.version':               None,
            'puavo.grub.boot_default':            None,
            'puavo.grub.developer_mode.enabled':  None,
            'puavo.grub.windows.enabled':         None,
        }
        self.abitti_info = None
        self.initializing_ui = True
        self.save_state_flag = True


    def get_list_of_abitti_versions(self):
        try:
            versions = self.abitti_info['build_numbers'].keys()
            student_versions = [ v for v in versions if v.startswith('ABITTI') ]
        except:
            return []

        # pick the first eight versions
        return (sorted(student_versions, reverse=True))[:8]


    def prepare(self):
        self.puavo_conf_grid = builder.get_object('puavo_conf_grid')

        self.abitti_info = self.get_abitti_info()
        self.abitti_latest_version = self.get_abitti_latest_version()
        self.abitti_school_version = self.get_abitti_school_version()

        self.abitti_version_latest_button \
          = builder.get_object('abitti_version_latest')
        self.abitti_version_school_button \
          = builder.get_object('abitti_version_school')
        self.abitti_version_any_button \
          = builder.get_object('abitti_version_any')
        self.abitti_version_box = builder.get_object('abitti_version')

        for abitti_version in self.get_list_of_abitti_versions():
          self.abitti_version_box.append(abitti_version, abitti_version)

        if self.abitti_latest_version:
            self.abitti_version_latest_button.set_label('%s (%s)' \
                % (self.abitti_version_latest_button.get_label(),
                   self.abitti_latest_version))
        if self.abitti_school_version:
            self.abitti_version_school_button.set_label('%s (%s)' \
                % (self.abitti_version_school_button.get_label(),
                   self.abitti_school_version))

        self.boot_abitti_button   = builder.get_object('boot_abitti')
        self.boot_puavo_os_button = builder.get_object('boot_puavo_os')
        self.boot_windows_button  = builder.get_object('boot_windows')

        self.developer_mode_switch = builder.get_object('developer_mode_switch')
        self.use_windows_switch = builder.get_object('use_windows_switch')

        self.reset_to_factory_settings \
          = self.builder.get_object('reset_to_factory_settings')
        self.reset_to_factory_settings.connect('clicked',
          self.confirm_reset_to_factory_settings)

        self.abitti_version_latest_button.connect('toggled',
            self.abitti_version_latest_chosen)
        self.abitti_version_school_button.connect('toggled',
            self.abitti_version_school_chosen)

        self.abitti_version_any_button.connect('toggled',
                                               self.abitti_version_any_chosen)

        self.boot_abitti_button.connect('toggled', self.boot_abitti_chosen)
        self.boot_puavo_os_button.connect('toggled', self.boot_puavo_os_chosen)
        self.boot_windows_button.connect('toggled', self.boot_windows_chosen)
        self.developer_mode_switch.connect('notify::active',
            self.developer_mode_switch_changed)
        self.use_windows_switch.connect('notify::active',
            self.use_windows_switch_changed)

        self.remove_entries_without_puavoconf()
        self.remove_disabled_entries()
        self.update_gui_state_from_puavoconf()

        self.abitti_version_box.connect('changed',
                                        self.abitti_version_box_changed)

        GLib.timeout_add(500, self.save_state)
        self.initializing_ui = False


    def get_abitti_info(self):
        try:
            with open('/state/abitti/abitti.json') as file:
                return json.load(file)
        except:
            return None


    def get_human_version(self, abitti_version):
        stripped_version = strip_abitti_v(abitti_version)
        if not re.match('^\d+$', stripped_version):
          return stripped_version

        version_with_abitti = 'abitti-v%s' % stripped_version
        if version_with_abitti in self.abitti_info['images']:
          version_info = self.abitti_info['images'][version_with_abitti]
          if 'version' in version_info:
            return version_info['version']

        return abitti_version


    def get_abitti_latest_version(self):
        try:
            latest_version = self.abitti_info['latest']
            if type(latest_version) != str:
                raise Exception('latest version is not a string')
            return self.get_human_version(latest_version)
        except:
            return None


    def get_abitti_school_version(self):
        # The "school version" might also come from organisation or
        # device-specific settings.
        try:
            with open('/state/etc/puavo/device.json') as file:
                device = json.load(file)
            school_version = device['conf']['puavo.abitti.version']
            if type(school_version) != str:
                raise Exception('school version is not a string')
            return self.get_human_version(school_version)
        except:
            return None


    def abitti_version_latest_chosen(self, widget):
        if not widget.get_active():
            return
        widget.grab_focus()
        self.set_abitti_version('latest')


    def abitti_version_school_chosen(self, widget):
        if not widget.get_active():
            return
        widget.grab_focus()
        self.set_abitti_version(None)


    def set_abitti_version(self, version):
        if version != None:
              version = version.strip()
              if version == '':
                  version = 'latest'
              elif version == 'latest':
                  pass
              else:
                  try:
                      version_number = int(version)
                      version = 'abitti-v%d' % version_number
                  except ValueError:
                      # if it is not a number, it is probably the new kind of
                      # version string and we just let it pass
                      pass

        self.puavo_conf['puavo.abitti.version'] = version
        self.save_state_flag = True


    def abitti_version_any_chosen(self, widget):
        if not widget.get_active():
            return
        self.abitti_version_box.grab_focus()
        self.set_abitti_version( self.abitti_version_box.get_active_text() )


    def abitti_version_box_changed(self, widget):
        self.abitti_version_any_button.set_active(True)
        self.set_abitti_version( self.abitti_version_box.get_active_text() )


    def boot_abitti_chosen(self, widget):
        if not widget.get_active():
            return
        self.puavo_conf['puavo.grub.boot_default'] = 'abitti'
        self.save_state_flag = True


    def boot_puavo_os_chosen(self, widget):
        if not widget.get_active():
            return
        self.puavo_conf['puavo.grub.boot_default'] = 'puavo-os'
        self.save_state_flag = True


    def boot_windows_chosen(self, widget):
        if not widget.get_active():
            return
        self.puavo_conf['puavo.grub.boot_default'] = 'windows'
        self.save_state_flag = True


    def developer_mode_switch_changed(self, widget, gparam):
        if widget.get_active():
            self.puavo_conf['puavo.grub.developer_mode.enabled'] = 'true'
        else:
            self.puavo_conf['puavo.grub.developer_mode.enabled'] = 'false'
        self.save_state_flag = True


    def use_windows_switch_changed(self, widget, gparam):
        if widget.get_active():
            self.puavo_conf['puavo.grub.windows.enabled'] = 'true'
            self.boot_windows_button.set_sensitive(True)

            if not self.initializing_ui:
                msg = _tr('It is now possible to choose Windows from' \
                          ' the boot menu when starting up the computer.')
                if self.boot_abitti_button:
                    msg += '  ' \
                       + _tr('Abitti-compatible eExam-system is not updated when running Windows,' \
                             ' you have to boot into the current system to update it.')
                dialog = Gtk.MessageDialog(self.app_window, 0,
                  Gtk.MessageType.WARNING, Gtk.ButtonsType.OK,
                  msg)
                dialog.run()
                dialog.destroy()

        else:
            self.puavo_conf['puavo.grub.windows.enabled'] = 'false'
            self.boot_windows_button.set_sensitive(False)
            if self.boot_windows_button.get_active():
                self.boot_puavo_os_button.set_active(True)
        self.save_state_flag = True


    def we_have_abitti(self):
        return self.abitti_info and 'build_numbers' in self.abitti_info \
                 and type(self.abitti_info['build_numbers']) == dict


    def we_have_windows(self):
        return os.path.exists('/images/boot/.puavo_windows_partition')


    def remove_entries_without_puavoconf(self):
        remove_gui_elements = {}

        if not self.we_have_abitti():
            del self.puavo_conf['puavo.abitti.version']

        if not self.we_have_windows():
            del self.puavo_conf['puavo.grub.windows.enabled']

        if not 'puavo.abitti.version' in self.puavo_conf:
            self.boot_abitti_button.destroy()
            self.boot_abitti_button = None
            remove_gui_elements['puavo.abitti.version'] = True

        if 'puavo.abitti.version' in self.puavo_conf \
          and not self.abitti_school_version:
            self.abitti_version_school_button.hide()
            if not self.puavo_conf['puavo.abitti.version']:
                # old configuration value was "school", yet we do not
                # have a GUI element for that, so change to the 'latest'
                self.puavo_conf['puavo.abitti.version'] = 'latest'

        if not 'puavo.grub.windows.enabled' in self.puavo_conf:
            self.boot_windows_button.destroy()
            self.boot_windows_button = None
            remove_gui_elements['puavo.grub.windows.enabled'] = True

        if not self.boot_abitti_button and not self.boot_windows_button:
            del self.puavo_conf['puavo.grub.boot_default']
            remove_gui_elements['puavo.grub.boot_default'] = True

        for puavo_conf_key in self.puavo_conf.copy():
            try:
                self.puavo_conf[puavo_conf_key] = puavoconf_get(puavo_conf_key)
            except subprocess.CalledProcessError:
                print("could not get puavo-conf key for %s" % puavo_conf_key,
                      file=sys.stderr)
                del self.puavo_conf[puavo_conf_key]
                remove_gui_elements[puavo_conf_key] = True

        for puavo_conf_key in remove_gui_elements:
            self.remove_grid_entry(self.puavo_conf_grid,
                                   self.builder.get_object(puavo_conf_key))

    def remove_disabled_entries(self):
        disableconfs = {
            'puavo.laptop-setup.enable_setting.abitti_version':  'puavo.abitti.version',
            'puavo.laptop-setup.enable_setting.boot_default':    'puavo.grub.boot_default',
            'puavo.laptop-setup.enable_setting.windows_enabled': 'puavo.grub.windows.enabled',
        }

        for disabler_key in disableconfs:
            try:
                if(puavoconf_get(disabler_key)=="false"):
                    self.remove_grid_entry(self.puavo_conf_grid,
                        self.builder.get_object(disableconfs[disabler_key]))
                    if(disabler_key=='puavo.laptop-setup.enable_setting.abitti_version'):
                        Gtk.Widget.set_visible(self.builder.get_object('puavo.abitti.version.display'), True)
                        self.set_abitti_version(None) # default to school version
                        if(self.abitti_school_version):
                            self.builder.get_object('puavo.abitti.version.number').set_text(self.abitti_school_version)
                        else:
                            try:
                                self.builder.get_object('puavo.abitti.version.number').set_text(self.abitti_latest_version)
                            except TypeError: # weird case, nothing relevant to display available, leave blank
                                self.builder.get_object('puavo.abitti.version.number').set_text("")
            except subprocess.CalledProcessError:
                print("could not get puavo-conf key for %s" % disabler_key,
                        file=sys.stderr)

    def update_gui_state_from_puavoconf(self):
        for key, value in self.puavo_conf.items():
            if key == 'puavo.abitti.version':
                if value == None:
                    self.abitti_version_school_button.set_active(True)
                    self.abitti_version_box.set_active(-1)
                elif value == 'latest':
                    self.abitti_version_latest_button.set_active(True)
                    self.abitti_version_box.set_active(-1)
                else:
                    value = strip_abitti_v(value)
                    self.abitti_version_box.set_active_id(value)
                    self.abitti_version_any_button.set_active(True)
            elif key == 'puavo.grub.boot_default':
                if value == 'windows' and self.boot_windows_button:
                    self.boot_windows_button.set_active(True)
                elif value == 'abitti' and self.boot_abitti_button:
                    self.boot_abitti_button.set_active(True)
                else:
                    self.boot_puavo_os_button.set_active(True)
            elif key == 'puavo.grub.windows.enabled':
                    self.use_windows_switch.set_state(value == 'true')
            elif key == 'puavo.grub.developer_mode.enabled':
                self.developer_mode_switch.set_state(value == 'true')


    def remove_grid_entry(self, grid, label):
        i = 0
        while True:
            child_at = grid.get_child_at(0, i)
            if child_at == None:
                return
            if child_at == label:
                grid.remove_row(i)
                return
            i += 1


    def save_state(self):
        if not self.save_state_flag:
            return True
        try:
            self.save_state_now()
            self.save_state_flag = False
        except:
            dialog = Gtk.MessageDialog(self.app_window, 0,
              Gtk.MessageType.ERROR, Gtk.ButtonsType.OK,
              _tr('error saving changes'))
            dialog.run()
            dialog.destroy()

        return True


    def save_state_now(self):
        for key, value in self.puavo_conf.items():
            if value == None:
                cmd = [ 'sudo', '-n', 'puavo-conf-local', '-u', key ]
            else:
                cmd = [ 'sudo', '-n', 'puavo-conf-local', key, value ]
            subprocess.check_call(cmd)


    def confirm_reset_to_factory_settings(self, widget):
        dialog = Gtk.MessageDialog(
            parent=self.app_window,
            modal=True,
            destroy_with_parent=True,
            message_type=Gtk.MessageType.WARNING,
            buttons=Gtk.ButtonsType.OK_CANCEL,
            text=_tr('DANGER! DANGER!'),
            secondary_text=_tr(
              'THIS PROCEDURE WILL RESET THIS COMPUTER TO FACTORY STATE!' \
              + '  IT WILL DESTROY ALL YOUR DATA IN YOUR HOME DIRECTORY,' \
              + ' AND MORE!  WHEN IN DOUBT, TURN OFF THE MACHINE, PANIC' \
              + ' AND RUN AWAY!  (press OK and provide your password' \
              + ' if you still want to do this.)')
        )
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
          self.run_reset_to_factory_settings()
        dialog.destroy()


    def run_reset_to_factory_settings(self):
        factory_reset_text_view = builder.get_object('factory_reset_text_view')
        factory_reset_status_bar = builder.get_object('factory_reset_status_bar')
        factory_reset_text_buffer = Gtk.TextBuffer()
        factory_reset_text_view.set_buffer(factory_reset_text_buffer)
        context_id = factory_reset_status_bar.get_context_id('progress')

        def text_buffer_write(line):
            step_log_line_match = re.match(r'^> info: step (\d+/\d+)$', line)
            if step_log_line_match is not None:
                steps = step_log_line_match.group(1)
                text = _tr('Factory reset is running step')
                status_message = f"{text} {steps}..."
                factory_reset_status_bar.push(context_id, status_message)

            factory_reset_text_buffer.insert_at_cursor(line)

            return False

        def text_view_scroll_to_bottom():
            factory_reset_text_view.scroll_mark_onscreen(factory_reset_text_buffer.get_insert())
            return False

        def on_cmd_start():
            status_message = _tr('Factory reset is running')
            factory_reset_status_bar.push(context_id, f"{status_message}...")

            return False

        def on_cmd_start_error(exception):
            factory_reset_dialog.set_deletable(True)
            factory_reset_dialog_button.set_sensitive(True)
            status_message = _tr('Failed to start factory reset')
            factory_reset_status_bar.push(context_id, f"{status_message}.")
            text_buffer_write(str(exception))
            dialog_title = _tr('Factory reset failed')
            dialog = Gtk.MessageDialog(
                parent=factory_reset_dialog,
                title=f"{dialog_title}!",
                flags=0,
                message_type=Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.OK,
                text=f"{status_message}.",
            )
            dialog.run()
            dialog.destroy()

            return False

        def on_cmd_exit(returnvalue):
            factory_reset_dialog.set_deletable(True)
            factory_reset_dialog_button.set_sensitive(True)
            if returnvalue == 0:
                text = _tr('Factory reset succeeded. The system is going to reboot in few seconds...')
                factory_reset_status_bar.push(context_id, text)
                dialog = Gtk.MessageDialog(
                    parent=factory_reset_dialog,
                    flags=0,
                    message_type=Gtk.MessageType.INFO,
                    buttons=Gtk.ButtonsType.OK,
                    text=text,
                )
            else:
                status_message = _tr('Factory reset failed')
                factory_reset_status_bar.push(context_id, f"{status_message}.")
                help_message = _tr('Further details can be found from the factory reset log. Please contact support for assistance.')
                dialog = Gtk.MessageDialog(
                    parent=factory_reset_dialog,
                    flags=0,
                    message_type=Gtk.MessageType.ERROR,
                    buttons=Gtk.ButtonsType.OK,
                    text=f"{status_message}. {help_message}",
                )
            dialog.run()
            dialog.destroy()

            return False

        def run_cmd():
            cmd = [ 'pkexec',
                    '/usr/sbin/puavo-reset-laptop-to-factory-defaults',
                    '--force' ]

            cmd_process = None
            try:
                cmd_process = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, text=True)
            except Exception as e:
                GLib.idle_add(on_cmd_start_error, e)
            else:
                GLib.idle_add(on_cmd_start)
                cmd_process.stdout.reconfigure(line_buffering=True)

                for line in cmd_process.stdout:
                    GLib.idle_add(text_buffer_write, line)

                GLib.idle_add(text_view_scroll_to_bottom)
            finally:
                if cmd_process is not None:
                    ## Wait forever? Killing
                    ## puavo-reset-latop-to-factory-defaults might lead to
                    ## a corrupt system.
                    returncode = cmd_process.wait()
                    GLib.idle_add(on_cmd_exit, returncode)

        thread = threading.Thread(target=run_cmd, daemon=True)
        thread.start()
        factory_reset_dialog.run()
        factory_reset_dialog.hide()

def on_factory_reset_dialog_delete_event(dialog, event):
    # We don't want to destroy the factory reset dialog because the
    # user might re-enter or retry it. The dialog is created by
    # builder only once.

    # The other way would be to actually destroy them, but then
    # recreating would mean we would need to create a new builder each
    # time the dialog is shown. See
    # https://discourse.gnome.org/t/cannot-reopen-dialog-after-closed-with-x-if-using-gtkbuilder-for-construction/7019
    #
    # I thing hiding is fine. Recreating builder and new dialog each
    # time seems unncessary waste of resources.
    dialog.hide()
    return True

builder = Gtk.Builder()
builder.set_translation_domain('puavo-laptop-setup')
builder.add_from_file('/usr/share/puavo-laptop-setup/puavo-laptop-setup.glade')

app_window = builder.get_object('app_window')
app_window.set_icon_name('drive-harddisk-system')
app_window.set_title(_tr('Laptop setup'))
app_window.connect('destroy', Gtk.main_quit)

factory_reset_dialog = builder.get_object('factory_reset_dialog')
factory_reset_dialog.connect('delete-event', on_factory_reset_dialog_delete_event)
factory_reset_dialog.set_size_request(800, 400)

factory_reset_dialog_button = builder.get_object('factory_reset_dialog_button')
## I could figure it out how in earth this should be done with Glade
## for GtkDialog. Some googling seems to indicate that there should be
## "Response ID" etc. available and setting it should connect the
## button signal automatically to dialog.response with that response
## ID, but nope, I could not find that from Glade.
##
## Glade seems quite awkward and clumsy.
factory_reset_dialog_button.connect('clicked', lambda _: factory_reset_dialog.response(Gtk.ResponseType.CLOSE))

try:
    subprocess.check_call([ 'sudo', '-n', 'puavo-conf-local', '--check'])
except subprocess.CalledProcessError:
    errmsg = _tr('You do not have the required permissions to use this tool.')
    dialog = Gtk.MessageDialog(app_window, 0, Gtk.MessageType.ERROR,
               Gtk.ButtonsType.CANCEL, errmsg)
    dialog.run()
    sys.exit(1)

this_script = open(os.path.realpath(sys.argv[0]), 'r')
try:
    fcntl.flock(this_script, fcntl.LOCK_EX | fcntl.LOCK_NB)
except BlockingIOError:
    errmsg = ('"%s"' % _tr('Laptop setup')) + ' ' + _tr('is already running')
    dialog = Gtk.MessageDialog(app_window, 0, Gtk.MessageType.ERROR,
               Gtk.ButtonsType.CANCEL, errmsg)
    dialog.run()
    sys.exit(1)

laptop_setup = PuavoLaptopSetup(app_window, builder)
laptop_setup.prepare()
laptop_setup.save_state_flag = True

app_window.show()

Gtk.main()
