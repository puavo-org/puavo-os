#!/usr/bin/env python3

"""
Puavo Display Manager
"""

# Standard library imports
import argparse
import logging
import logging.handlers
import subprocess
import sys
import typing

_LOGGER = logging.getLogger("puavo-display-manager")


def _call_run_xrandr(run_xrandr_args: typing.List[str]) -> int:
    _LOGGER.info("Calling run-xrandr...")
    _LOGGER.debug("run-xrandr arguments: %r", run_xrandr_args)
    run_xrandr_args.insert(0, "/usr/lib/puavo-displays/run-xrandr")
    run_xrandr_status = subprocess.call(run_xrandr_args)
    _LOGGER.info("run-xrandr exited with status %d", run_xrandr_status)

    return run_xrandr_status


def _parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="Puavo display manager",
    )
    parser.add_argument(
        "--only-set-max-bpc",
        action="store_true",
        default=False,
        help="Only set max bpc and exit",
    )
    parser.add_argument(
        "--log-level",
        choices=logging.getLevelNamesMapping().keys(),
        default=logging.getLevelName(logging.INFO),
    )

    return parser.parse_args()


def _main() -> int:
    logging_formatter = logging.Formatter(
        fmt="%(name)s: %(levelname)s %(asctime)s %(message)s",
        datefmt="%Y-%m-%dT%H:%M:%S%z",
    )

    logging_handler_stderr = logging.StreamHandler(sys.stderr)
    logging_handler_stderr.setFormatter(logging_formatter)
    _LOGGER.addHandler(logging_handler_stderr)

    logging_handler_syslog = logging.handlers.SysLogHandler("/dev/log")
    logging_handler_syslog.setFormatter(logging_formatter)
    _LOGGER.addHandler(logging_handler_syslog)

    args = _parse_args()

    _LOGGER.setLevel(args.log_level)

    run_xrandr_args = []
    if args.only_set_max_bpc:
        run_xrandr_args.append("--only-set-max-bpc")

    return _call_run_xrandr(run_xrandr_args)


if __name__ == "__main__":
    sys.exit(_main())
