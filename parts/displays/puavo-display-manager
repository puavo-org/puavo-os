#!/usr/bin/env python3

# pylint: disable=invalid-name

"""
Puavo Display Manager
"""

# Standard library imports
import argparse
import collections
import logging
import logging.handlers
import os
import subprocess
import sys
import typing

# Internal imports
import puavodisplays.puavoconf
import puavodisplays.xrandr

_LOGGER = logging.getLogger("puavo-display-manager")


def _call_run_xrandr() -> None:
    _LOGGER.info("Calling run-xrandr...")
    subprocess.check_call(["/usr/lib/puavo-displays/run-xrandr"])


def _parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=__doc__,
    )
    parser.add_argument(
        "--log-level",
        choices=logging.getLevelNamesMapping().keys(),
        default=logging.getLevelName(logging.INFO),
    )
    parser.add_argument(
        "--ignore-mutter",
        action="store_true",
        default=False,
        help="manage displays when Mutter is configured to be in charge",
    )
    parser.add_argument(
        "--best",
        action="store_true",
        default=False,
        help="do everything to setup the best display configuration",
    )

    return parser.parse_args()


def _int_10base(v: str) -> int:
    return int(v, 10)


def _set_max_bpc() -> None:
    desired_max_bpc = puavodisplays.puavoconf.get_as(
        "puavo.displays.max_bpc", _int_10base
    )

    _LOGGER.info("Setting max bpc of all display outputs to %d.", desired_max_bpc)
    puavodisplays.xrandr.set_max_bpc_of_all_display_outputs(
        desired_max_bpc, logger=_LOGGER
    )


def _check_required_env_vars() -> None:
    for env_var in ("DISPLAY", "XAUTHORITY", "MUTTER_ALLOW_CONFIGURATION"):
        if env_var not in os.environ:
            raise RuntimeError("Required environment variable is not set", env_var)


def _is_mutter_in_charge() -> bool:
    return not set(os.environ["MUTTER_ALLOW_CONFIGURATION"].split(",")).isdisjoint(
        {"default", "user"}
    )


def _does_puavo_have_xrandr_configurations() -> bool:
    # Comparing values to knownx defaults. If values differ, it means
    # "Puavo has some xrandr configurations".
    if puavodisplays.puavoconf.get("puavo.xrandr.apply_presets") != "":
        return True

    if puavodisplays.puavoconf.get("puavo.xrandr.args") != "[]":
        return True

    if puavodisplays.puavoconf.get("puavo.xrandr.extra_modes") != "auto":
        return True

    return False


def _main() -> int:
    logging_formatter = logging.Formatter(
        fmt="%(name)s: %(levelname)s %(asctime)s %(message)s",
        datefmt="%Y-%m-%dT%H:%M:%S%z",
    )

    logging_handler_stderr = logging.StreamHandler(sys.stderr)
    logging_handler_stderr.setFormatter(logging_formatter)
    _LOGGER.addHandler(logging_handler_stderr)

    logging_handler_syslog = logging.handlers.SysLogHandler("/dev/log")
    logging_handler_syslog.setFormatter(logging_formatter)
    _LOGGER.addHandler(logging_handler_syslog)

    args = _parse_args()

    _LOGGER.setLevel(args.log_level)

    _LOGGER.info("Starting to manage all displays.")

    _check_required_env_vars()

    # Models the runtime setup Puavo Display Manager has to deal with.
    Setup = collections.namedtuple(
        "Setup",
        [
            "args_best",
            "args_ignore_mutter",
            "mutter_in_charge",
            "puavo_has_confs",
        ],
    )

    setup = Setup(
        args_best=args.best,
        args_ignore_mutter=args.ignore_mutter,
        mutter_in_charge=_is_mutter_in_charge(),
        puavo_has_confs=_does_puavo_have_xrandr_configurations(),
    )
    _LOGGER.info("%s", setup)

    # fmt: off
    # All actions Puavo Display Manager takes are determined by the runtime setup. (2**4 definitions; 4 boolean flags)
    action_map: typing.Dict[Setup, typing.List[typing.Callable[[], None]]] = {
        # Hotplug case:
        Setup(args_best=True  , args_ignore_mutter=False , mutter_in_charge=True  , puavo_has_confs=False) : [_set_max_bpc],
        Setup(args_best=True  , args_ignore_mutter=False , mutter_in_charge=True  , puavo_has_confs=True)  : [_set_max_bpc],
        Setup(args_best=True  , args_ignore_mutter=False , mutter_in_charge=False , puavo_has_confs=False) : [_set_max_bpc],
        Setup(args_best=True  , args_ignore_mutter=False , mutter_in_charge=False , puavo_has_confs=True)  : [_set_max_bpc, _call_run_xrandr],

        # Session start case:
        Setup(args_best=False , args_ignore_mutter=True  , mutter_in_charge=True  , puavo_has_confs=False) : [],
        Setup(args_best=False , args_ignore_mutter=True  , mutter_in_charge=True  , puavo_has_confs=True)  : [_set_max_bpc, _call_run_xrandr],
        Setup(args_best=False , args_ignore_mutter=True  , mutter_in_charge=False , puavo_has_confs=False) : [],
        Setup(args_best=False , args_ignore_mutter=True  , mutter_in_charge=False , puavo_has_confs=True)  : [_set_max_bpc, _call_run_xrandr],

        # Greeter start case:
        Setup(args_best=True  , args_ignore_mutter=True  , mutter_in_charge=True  , puavo_has_confs=False) : [_set_max_bpc],
        Setup(args_best=True  , args_ignore_mutter=True  , mutter_in_charge=True  , puavo_has_confs=True)  : [_set_max_bpc, _call_run_xrandr],
        Setup(args_best=True  , args_ignore_mutter=True  , mutter_in_charge=False , puavo_has_confs=False) : [_set_max_bpc],
        Setup(args_best=True  , args_ignore_mutter=True  , mutter_in_charge=False , puavo_has_confs=True)  : [_set_max_bpc, _call_run_xrandr],

        # Default case:
        Setup(args_best=False , args_ignore_mutter=False , mutter_in_charge=True  , puavo_has_confs=False) : [],
        Setup(args_best=False , args_ignore_mutter=False , mutter_in_charge=True  , puavo_has_confs=True)  : [],
        Setup(args_best=False , args_ignore_mutter=False , mutter_in_charge=False , puavo_has_confs=False) : [],
        Setup(args_best=False , args_ignore_mutter=False , mutter_in_charge=False , puavo_has_confs=True)  : [_set_max_bpc, _call_run_xrandr],
    }
    # fmt: on

    for action in action_map[setup]:
        action()

    _LOGGER.info("I have done everything I can.")
    return 0


if __name__ == "__main__":
    try:
        sys.exit(_main())
    finally:
        _LOGGER.info("Bye.")
