#!/usr/bin/env python3

# pylint: disable=invalid-name

"""
Set max bpc of all displays.
"""

# Standard library imports
import argparse
import logging
import logging.handlers
import sys

# Internal imports
import puavodisplays.puavoconf
import puavodisplays.xrandr

_LOGGER = logging.getLogger(__name__)
_LOGGER.setLevel(logging.INFO)
_LOGGER.addHandler(logging.handlers.SysLogHandler("/dev/log"))


def _int_10base(v: str) -> int:
    return int(v, 10)


def _main() -> int:
    argparser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=__doc__,
    )
    argparser.add_argument(
        "MAX_BPC",
        nargs="?",
        help="If not given, puavo.displays.max_bpc value is used instead.",
        type=_int_10base,
        default=None,
    )

    args = argparser.parse_args()

    if args.MAX_BPC is None:
        desired_max_bpc = puavodisplays.puavoconf.get_as(
            "puavo.displays.max_bpc", _int_10base
        )
    else:
        desired_max_bpc = args.MAX_BPC

    for output_name, output in puavodisplays.xrandr.get_prop().items():
        if "max bpc" in output["props"]:
            _LOGGER.info("desired max bpc of %r is %d", output_name, desired_max_bpc)

            max_bpc_prop = output["props"]["max bpc"]
            current_value = max_bpc_prop["value"]
            value_min = max_bpc_prop["value_min"]
            value_max = max_bpc_prop["value_max"]

            new_value = min(max(value_min, desired_max_bpc), value_max)
            if new_value != desired_max_bpc:
                _LOGGER.info(
                    "adjusted desired max bpc of %r from %d to %d to "
                    "match the supported range (%d, %d)",
                    output_name,
                    desired_max_bpc,
                    new_value,
                    value_min,
                    value_max,
                )

            puavodisplays.xrandr.set_max_bpc(output_name, new_value)
            _LOGGER.info(
                "set max bpc of %r from %d to %d",
                output_name,
                current_value,
                new_value,
            )
    return 0


if __name__ == "__main__":
    sys.exit(_main())
