#!/bin/sh

set -eu

grubedit() {
  grubenv_path='/images/boot/grub/grubenv'
  if ! grub-editenv "$grubenv_path" "$@"; then
    echo 'Creating new grubenv because of an error' >&2
    grub-editenv "$grubenv_path" create
    grub-editenv "$grubenv_path" "$@"
  fi
}

setup_developer_mode() {
  if [ "$(puavo-conf puavo.grub.developer_mode.enabled)" = 'true' ]; then
    grubedit set "puavo_show_imageoverlays=true"
  else
    grubedit unset puavo_show_imageoverlays
  fi
}

setup_grub_theme() {
  grub_theme=$(puavo-conf puavo.grub.theme)
  if [ -n "$grub_theme" ]; then
    grubedit set "puavo_grub_theme=${grub_theme}"
  else
    grubedit unset puavo_grub_theme
  fi
}

setup_kernel_arguments() {
  kernel_arguments="$(puavo-conf puavo.kernel.arguments)$(selected_puavo_conf_arguments_as_kernel_args)"
  if [ -n "$kernel_arguments" ]; then
    grubedit set "puavo_kernel_arguments=${kernel_arguments}"
  else
    grubedit unset puavo_kernel_arguments
  fi
}

setup_kernel_version() {
  kernel_version=$(puavo-conf puavo.kernel.version)
  if [ -n "$kernel_version" ]; then
    grubedit set "puavo_kernel_version=${kernel_version}"
  else
    grubedit unset puavo_kernel_version
  fi
}

setup_locale() {
  puavo_l10n_locale=$(puavo-conf puavo.l10n.locale)
  if [ -n "$puavo_l10n_locale" ]; then
    grubedit set "lang=${puavo_l10n_locale}"
  else
    grubedit unset lang
  fi
}

setup_optional_grub_config() {
  puavo_optional_grub_conf=$(puavo-conf puavo.grub.config)
  if [ -n "$puavo_optional_grub_conf" ]; then
    grubedit set "puavo_optional_grub_conf=${puavo_optional_grub_conf}"
  else
    grubedit unset puavo_optional_grub_conf
  fi
}

setup_timeout() {
  grub_timeout=$(puavo-conf puavo.grub.timeout)
  if [ -n "$grub_timeout" ]; then
    grubedit set "puavo_grub_timeout=${grub_timeout}"
  else
    grubedit unset puavo_grub_timeout
  fi
}

has_efi() {
  grep -q '^efivarfs ' /proc/mounts
}

efibootmgr_windows() {
  efibootmgr_flag=$1
  shift

  for boot_entry in $(efibootmgr | awk '/Windows/ {print substr($0,5,4)}'); do
    efibootmgr -q "${efibootmgr_flag}" -b "${boot_entry}" || return 1
  done

  return 0
}

mount_efi_system_partition() {
  efi_system_partition_devpath=$(lsblk -n -l -o PATH,PARTTYPE | awk '$2 == "c12a7328-f81f-11d2-ba4b-00a0c93ec93b" {print $1}')

  efi_system_partition_mountpath=$(mktemp -d -p / EFI_SYSTEM_PARTITION.XXXXXXXXXXXX)
  mount -onodev,nosuid "${efi_system_partition_devpath}" "${efi_system_partition_mountpath}" || {
    rm -rf "${efi_system_partition_mountpath}"
    return 1
  }

  echo "${efi_system_partition_mountpath}"
}

efi_break_windows() {
  efi_mount_path=$(mount_efi_system_partition) || return 1

  if [ -d "${efi_mount_path}/EFI/Microsoft" ]; then
    echo 'Defusing Windows...' >&2
    if [ -e "${efi_mount_path}/EFI/Puavo-defused-Windows.tar.gz" ]; then
      echo "Failed to defuse Windows, '${efi_mount_path}/EFI/Puavo-defused-Windows.tar.gz' already exists" >&2
      return 1
    fi

    defused_windows_tmpfile=$(mktemp -p "${efi_mount_path}/EFI" 'Puavo-defused-Windows.tar.gz.tmp.XXXXXXXX')
    tar -C "${efi_mount_path}/EFI" -z -c -f "${defused_windows_tmpfile}" Microsoft || {
      rm -rf "${defused_windows_tmpfile}" || true
      umount "${efi_mount_path}" || return 1
      rm -rf "${efi_mount_path}"
      return 1
    }
    mv "${defused_windows_tmpfile}" "${efi_mount_path}/EFI/Puavo-defused-Windows.tar.gz"
    rm -rf "${efi_mount_path}/EFI/Microsoft" || {
      umount "${efi_mount_path}" || return 1
      rm -rf "${efi_mount_path}"
      return 1
    }
    echo 'Windows defused.' >&2
  fi

  umount "${efi_mount_path}" || return 1
  rm -rf "${efi_mount_path}"
}

efi_fix_windows() {
  efi_mount_path=$(mount_efi_system_partition) || return 1

  if [ -f "${efi_mount_path}/EFI/Puavo-defused-Windows.tar.gz" ]; then
    echo 'Repriming Windows...' >&2
    if [ -e  "${efi_mount_path}/EFI/Microsoft" ]; then
      echo "Failed to reprime Windows: '${efi_mount_path}/EFI/Microsoft' already exists" >&2
      return 1
    fi
    tar -C "${efi_mount_path}/EFI" -z -x -f "${efi_mount_path}/EFI/Puavo-defused-Windows.tar.gz" || {
      rm -rf "${efi_mount_path}/EFI/Microsoft" || true
      umount "${efi_mount_path}" || return 1
      rm -rf "${efi_mount_path}"
      return 1
    }
    rm -f "${efi_mount_path}/EFI/Puavo-defused-Windows.tar.gz" || {
      umount "${efi_mount_path}" || return 1
      rm -rf "${efi_mount_path}"
      return 1
    }
    echo 'Windows reprimed.' >&2
  fi

  umount "${efi_mount_path}" || return 1
  rm -rf "${efi_mount_path}"
}

efi_disable_windows() {
  if [ "$(puavo-conf puavo.grub.windows.defuse_efi_boot_when_disabled)" != 'true' ]; then
    echo "puavo.grub.windows.defuse_efi_boot_when_disabled is not true, not disabling Windows EFI boot" >&2
    return 0
  fi

  efibootmgr_windows -A || return 1
  efi_break_windows
}

efi_enable_windows() {
  efi_fix_windows || return 1
  efibootmgr_windows -a
}

setup_windows_enabled() {
  if [ "$(puavo-conf puavo.grub.windows.enabled)" = 'true' ]; then
    if has_efi; then
      efi_enable_windows || return 1
    fi
    grubedit set "puavo_grub_windows_enabled=true" || return 1
  else
    grubedit unset puavo_grub_windows_enabled || return 1
    if has_efi; then
      efi_disable_windows || return 1
    fi
  fi

  return 0
}

get_puavoconf_value() {
  # Do not use puavo-conf to look this up.  We only pass this to kernel
  # arguments only if it has been changed to non-default from Puavo.
  # At least puavo.* values from kernel arguments should be ignored here.
  jq -r --arg puavo_conf_key "$1" '.puavoconf[$puavo_conf_key]' \
    /state/etc/puavo/device.json 2>/dev/null || echo null
}

selected_puavo_conf_arguments_as_kernel_args() {
  puavo_conf_to_kernel_args='
    puavo.admin.persistent_homedirs
    puavo.boot.plymouth.theme
    puavo.graphics.driver
    puavo.image.overlay
  '

  for puavo_conf_key in $puavo_conf_to_kernel_args; do
    # "null" can not be a valid value for the above puavo-conf variables.
    puavo_conf_value=$(get_puavoconf_value "$puavo_conf_key")
    if [ "$puavo_conf_value" != 'null' ]; then
      printf " %s" "${puavo_conf_key}=${puavo_conf_value}"
    fi
  done
}

status=0

setup_developer_mode       || status=1
setup_grub_theme           || status=1
setup_kernel_arguments     || status=1
setup_kernel_version       || status=1
setup_locale               || status=1
setup_optional_grub_config || status=1
setup_timeout              || status=1
setup_windows_enabled      || status=1

exit $status
