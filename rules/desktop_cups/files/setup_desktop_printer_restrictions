#!/bin/sh

set -eu

dry_run=false
use_lpadmin=false
verbose=false

opt="${1:-}"
case "$opt" in
  --dry-run)
    dry_run=true
    verbose=true
    ;;
  --use-lpadmin)
    use_lpadmin=true
    verbose=true
    ;;
  '')
    ;;
  *)
    echo "Unknown argument ${opt}" >&2
    ;;
esac

if [ -e /run/puavo/nbd-server ]; then
  device_json_path='/etc/puavo/device.json'
else
  device_json_path='/state/etc/puavo/device.json'
fi

explain_rationale() {
  local id rationale

  id=$1
  case "$id" in
    OPENINTHISSCHOOL)
      rationale='printer is open in the school this device belongs to' ;;
    OPENINSOMESCHOOL)
      rationale='printer is open in some school' ;;
    PRINTERINSAMESCHOOL)
      rationale='printer is restricted to school this device belongs to' ;;
    DEVICESPECIFIC)
      rationale='this specific device is allowed access to this printer' ;;
    GROUPSPECIFIC)
      rationale='access to printer is allowed for these groups' ;;
    NOPERMISSION)
      rationale='no suitable permissions could be found' ;;
    ERROR)
      rationale='error in looking up rationale' ;;
    *)
      rationale="rationale id not understood: ${id}" ;;
  esac

  echo "$rationale"
}

lookup_printer_key() {
  jq -r --arg key "$1" --arg printer "$2" '
    if .printers.restrictions[$printer] | has($key) then
      .printers.restrictions[$printer][$key]
    else
      ""
    end
  ' "$device_json_path"
}

# XXX Cleanup old stuff ... this may be removed after some years
# XXX except that the puavo.printing.cleanup_printers related
# XXX functionality is good to keep.
cleanup_old_managed_printers() {
  local cleanup_ok current_seconds dnssd_printers_path \
        printer_cleanup_rules_str

  dnssd_printers_path='/var/lib/puavo-desktop/dnssd_printers'

  if lpstat -r | grep -q 'is not running'; then
    # cups is not running, this is not the right time to do cleanup
    return 0
  fi

  cleanup_ok=true

  if [ -e "$dnssd_printers_path" ]; then
    for old_printer in $(jq -r '.[] | .name' "$dnssd_printers_path"); do
      if lpstat -v "$old_printer" > /dev/null 2>&1; then
        if ! lpadmin -x "$old_printer"; then
          cleanup_ok=false
        fi
      fi
    done

    if $cleanup_ok; then
      rm -f "$dnssd_printers_path"
    fi
  fi

  # Because the above cleanup has occasionally failed, we do a bit more
  # extensive cleanup.  Remove all unmanaged printers that have conflicting
  # names with those managed by cups-browsed.  Those are very likely remnants
  # of the old mechanism.
  if [ -e /etc/cups/printers.conf ]; then
    current_seconds=$(date +%s) || return 1
    printer_cleanup_rules_str=$(puavo-conf puavo.printing.cleanup_printers) \
      || return 1
    {
      awk -v current_seconds="$current_seconds" \
          -v printer_cleanup_rules_str="$printer_cleanup_rules_str" '
        BEGIN {
          ORS = "\000"

          split(printer_cleanup_rules_str, _printer_cleanup_rules)
          for (rule_i in _printer_cleanup_rules) {
            split(_printer_cleanup_rules[rule_i], a, ":")
            printer_cleanup_rules[ a[1] ] = a[2]
          }
        }

        $1 == "<Printer" || $1 == "<DefaultPrinter" {
          sub(/>$/, "", $2)
          printer = $2
          managed_by_cups_browsed = 0
          state = ""
          state_time = ""
        }

        $1 == "State" { state = $2; next }
        $1 == "StateTime" { state_time = $2; next }

        $1 == "Option" && ( \
          ($2 == "cups-browsed" && $3 == "true") \
            || $2 == "cups-browsed-dest-printer") {
          managed_by_cups_browsed = 1
          next
        }

        $1 == "</Printer>" || $1 == "</DefaultPrinter>" {
          if (printer == "") { next }

          if (managed_by_cups_browsed) {
            if (state == "Stopped") {
              printers_to_delete[printer] = printer
            }
            managed_printers[printer] = printer
          } else {
            unmanaged_printers[printer] = printer

            for (rule_state in printer_cleanup_rules) {
              if (rule_state == "*" || rule_state == state) {
                rule_state_time = printer_cleanup_rules[rule_state]
                if (rule_state_time == "*" \
                  || rule_state_time < (current_seconds - state_time)) {
                    printers_to_delete[printer] = printer
                }
              }
            }
          }

          printer = ""
        }

        END {
          for (managed in managed_printers) {
            printer_no_at = managed
            sub(/@.*$/, "", printer_no_at)
            if (printer_no_at in unmanaged_printers) {
              printers_to_delete[printer_no_at] = printer_no_at
            }
          }

          for (printer in printers_to_delete) {
            print printer
          }
        }
      ' /etc/cups/printers.conf | xargs -0 -n 1 -r lpadmin -x
    } || return 1
  fi

  return 0
}

if ! printer_list=$(jq -r '.printers.restrictions | keys | .[]' \
                          /etc/puavo/device.json); then
  echo 'Could not determine printer restrictions from device.json' >&2
  exit 1
fi

status=0

if $use_lpadmin && ! $dry_run; then
  cleanup_old_managed_printers || status=1
fi

use_puavo_permissions=false
if [ "$(puavo-conf puavo.printing.use_puavo_permissions)" = 'true' ]; then
  use_puavo_permissions=true
fi

for printer in $(printf "%s" "$printer_list" | sort -f); do
  if ! allow=$(lookup_printer_key allow "$printer"); then
    status=1
    continue
  fi

  if ! $use_puavo_permissions || [ "$allow" = '*' ]; then
    allowed_users='all'
  else
    if [ -n "$allow" ]; then
      allowed_users="root,${allow}"
    else
      allowed_users='root'
    fi
  fi

  if $verbose; then
    if $use_puavo_permissions; then
      rationale=$(lookup_printer_key rationale "$printer") || rationale='ERROR'
      explained=$(explain_rationale "$rationale")
    else
      explained='puavo.printing.use_puavo_permissions is false'
    fi
    echo "Allowed users for '${printer}' are '${allowed_users}': ${explained}."
  fi

  if $dry_run; then
    :
  elif $use_lpadmin; then
    if lpstat -v "$printer" > /dev/null 2>&1; then
      lpadmin -p "$printer" -u "allow:${allowed_users}" || status=1
    fi
  else
    browsed_printer_path="/var/cache/cups/cups-browsed-options-${printer}"
    # cups-browsed needs a little help.  This is essential for fatclients,
    # but laptops need this as well, because cups-browsed does not remove
    # the "requesting-user-name-allowed" key even in the case "AllowUser"
    # has been removed from the printer queue.
    cat "$browsed_printer_path" 2>/dev/null \
      | awk -F= -v allowed_users="$allowed_users" '
          $1 == "requesting-user-name-allowed" { next }
          $1 == "requesting-user-name-denied"  { next }
          { print }
          END {
            if (allowed_users != "all") {
              print "requesting-user-name-allowed=" allowed_users
            }
          }
        ' > "${browsed_printer_path}.tmp" || status=1
    mv "${browsed_printer_path}.tmp" "$browsed_printer_path" || status=1
  fi
done

exit $status
