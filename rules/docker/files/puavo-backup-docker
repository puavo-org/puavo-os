#!/bin/sh

set -eu

backupdir='/state/backup/docker'

cleanup() {
  if [ "$nextcloud_running" = 'true' ]; then
    docker exec nextcloud su -l -s /bin/bash www-data \
      -c 'php /var/www/html/occ maintenance:mode --off'
  fi
}

get_backup_info() {
  local container container_version jq_args ls_out timestamp

  if ! ls_out=$(docker container ls -a --format '{{.Names}} {{.Image}}'); then
    echo 'could not get container list' >&2
    return 1
  fi

  timestamp=$(date -Iseconds)
  jq_args="--arg timestamp ${timestamp}"
  for container in collabora nextcloud postgres; do
    container_version=$(printf %s "$ls_out" \
      | awk -v container="$container" '
          $1 == container { split($2, a, ":"); print a[2] }
        ')
    if [ -n "$container_version" ]; then
      jq_args="${jq_args} --arg ${container} ${container_version}"
    else
      jq_args="${jq_args} --argjson ${container} null"
    fi
  done

  jq --null-input $jq_args '
      .collabora = $collabora
    | .nextcloud = $nextcloud
    | .postgres  = $postgres
    | .timestamp = $timestamp
  '
}

run_rsnapshot() {
  rsnapshot -v -c /etc/puavo-docker/rsnapshot.conf "$@"
}

maybe_store_snapshot() {
  local last_modified tag
  tag=$1

  # the numbers here must match rsnapshot configuration

  case "$tag" in
    daily)
      source="${backupdir}/current.2"
      target="${backupdir}/daily.0"
      timediff=86400
      ;;
    weekly)
      source="${backupdir}/daily.6"
      target="${backupdir}/weekly.0"
      timediff=604800
      ;;
    monthly)
      source="${backupdir}/weekly.4"
      target="${backupdir}/monthly.0"
      timediff=2592000
      ;;
    *)
      echo 'error with check_snapshot' >&2
      return 1
      ;;
  esac

  if [ ! -e "$source" ]; then
    return 0
  fi

  if [ ! -e "$target" ]; then
    run_rsnapshot "$tag"
    return 0
  fi

  if last_modified=$(stat -c %Y "$target" 2>/dev/null); then
    if [ "$(date +%s)" -gt "$(($last_modified + $timediff))" ]; then
      run_rsnapshot "$tag"
    fi
  fi
}

if [ "$(id -u)" != 0 ]; then
  echo "Run $(basename $0) as root" >&2
  exit 1
fi

nextcloud_running=$(docker inspect nextcloud | jq -r '.[0].State.Running') \
                      || true
case "$nextcloud_running" in
  true)
    docker exec nextcloud su -l -s /bin/bash www-data \
      -c 'php /var/www/html/occ maintenance:mode --on'
    # It takes a while before maintenance mode is actually effective (why?).
    sleep 120
    ;;
  false)
    ;;
  null)
    echo 'No Nextcloud container, skipping backup'
    exit 0
    ;;
  *)
    echo "Unknown Nextcloud container state: ${nextcloud_running}" >&2
    exit 1
    ;;
esac

trap cleanup 0 ABRT INT PIPE QUIT TERM

postgres_running=$(docker inspect postgres | jq -r '.[0].State.Running') \
                     || true
pg_dump_path='/state/var/lib/docker/volumes/puavo_postgres/_data/.puavo_pg.dump'
case "$postgres_running" in
  true)
    docker exec postgres pg_dump -U pgadmin nc > "${pg_dump_path}.tmp"
    mv "${pg_dump_path}.tmp" "$pg_dump_path"
    ;;
  false)
    # If PostgreSQL is not running, remove a stale dump file, we should
    # restore by restoring all the database files as is.
    rm -f "$pg_dump_path"
    ;;
  *)
    echo 'Could not determine PostgreSQL state, presuming it is not running'
    rm -f "$pg_dump_path"
    ;;
esac

run_rsnapshot sync

# first remove so that hardlinking is removed
rm -f /state/backup/docker/.sync/backup_info.json
get_backup_info > /state/backup/docker/.sync/backup_info.json

run_rsnapshot current

maybe_store_snapshot daily
maybe_store_snapshot weekly
maybe_store_snapshot monthly

# The "cleanup"-function removes maintenance mode from Nextcloud if it
# was running.
