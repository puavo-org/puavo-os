#!/usr/bin/ruby

require 'fileutils'
require 'json'
require 'net/ldap'
require 'open3'
require 'puavo/conf'
require 'puavo/sharedir/ldap'
require 'puavo/sharedir/shared_directories'
require 'socket'
require 'yaml'

DOCKER_STATE_DIR = '/state/etc/docker'

DEFAULT_CONTAINER_LIST = %w(postgres nextcloud collabora)
DOCKER_COMPOSE_TEMPLATE_PATH = '/etc/puavo-docker/docker-compose.yml.tmpl'
DOCKER_COMPOSE_PATH = '/etc/puavo-docker/docker-compose.yml'
DOCKER_FILES_DIR = '/etc/puavo-docker/files'

CERTS_DIR   = File.join(DOCKER_STATE_DIR, 'certs')
CONFIG_DIR  = File.join(DOCKER_STATE_DIR, 'config')
SECRETS_DIR = File.join(DOCKER_STATE_DIR, 'secrets')

DOCKER_IP = '172.17.0.1'

IMAGEMAP = {
  'collabora' => 'collabora/code',
  'nextcloud' => 'nextcloud',
  'postgres'  => 'postgres',
}

def cleanup_docker_images()
  puts('> removing unused Docker images')
  unless system('docker', 'image', 'prune', '--all', '--force') then
    warn('error in pruning unused Docker images')
    return false
  end
  return true
end

def container_exists?(container_name)
  system('docker', 'inspect', container_name,
         :out => File::NULL, :err => File::NULL)
end

def get_container_versions()
  output, status \
   = Open3.capture2('docker', 'container', 'ls', '--format',
                    '{{.Image}} {{.Names}}')
  raise('docker container lookup returned error') unless status.success?

  container_versions = {}

  output.split("\n").each do
    image, container_name = *output.split
    version = image.split(':')[1]
    container_versions[container_name] = version
  end

  container_versions
end

def get_needed_puavoconf_values
  # keep the puavo-conf database open only for a short time
  puavoconf = Puavo::Conf.new
  values_by_key = {}
  keys = [ 'puavo.collabora.domain',
           'puavo.hosttype',
           'puavo.l10n.locale',
           'puavo.nextcloud.domain',
           'puavo.nextcloud.trusted_proxies' ]
  keys += DEFAULT_CONTAINER_LIST.map { |c| "puavo.docker.#{ c }.enabled" }
  keys += DEFAULT_CONTAINER_LIST.map { |c| "puavo.docker.#{ c }.version" }
  keys.each { |k| values_by_key[k] = puavoconf.get(k) }
  puavoconf.close()
  values_by_key
end

def ldap_agent_dn(ldap_base)
  "uid=nextcloud,ou=System Accounts,#{ ldap_base }"
end

def setup_nginx_configuration(primary_nc_domain, nc_domains_list,
                              collabora_domain, reload_nginx)
  cert_chain_path = File.join(CERTS_DIR, "#{ primary_nc_domain }-fullchain.pem")
  cert_key_path   = File.join(CERTS_DIR, "#{ primary_nc_domain }.key")

  raise "certificate file #{ cert_chain_path } is missing" \
    unless File.exists?(cert_chain_path)

  raise "certificate key #{ cert_key_path } is missing" \
    unless File.exists?(cert_key_path)

  server_names = nc_domains_list
  server_names << collabora_domain if collabora_domain

  nginx_conf = <<EOF
server {
    listen 80;
    server_name #{ server_names.join(' ') };

    return 301 https://${host}${request_uri};
}

server {
    listen 443 http2 ssl;
    server_name #{ nc_domains_list.join(' ') };

    ssl_certificate #{ cert_chain_path };
    ssl_certificate_key #{ cert_key_path };

    # https://docs.nextcloud.com/server/27/admin_manual/configuration_server/reverse_proxy_configuration.html

    location / {
        proxy_set_header HOST $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http://#{ DOCKER_IP }:880$request_uri;

        client_max_body_size 512M;
    }

    location /.well-known/carddav {
        return 301 $scheme://$host/remote.php/dav;
    }
    location /.well-known/caldav {
        return 301 $scheme://$host/remote.php/dav;
    }

    access_log /var/log/nginx/nextcloud-access.log;
    error_log /var/log/nginx/nextcloud-error.log;
}
EOF

  if collabora_domain then
    nginx_conf += <<EOF

server {
    listen 443 http2 ssl;
    server_name #{ collabora_domain };

    ssl_certificate #{ cert_chain_path };
    ssl_certificate_key #{ cert_key_path };

    # static files
    location ^~ /browser {
        proxy_pass https://#{ DOCKER_IP }:9980;
        proxy_set_header Host $http_host;
    }

    # WOPI discovery URL
    location ^~ /hosting/discovery {
        proxy_pass https://#{ DOCKER_IP }:9980;
        proxy_set_header Host $http_host;
    }

    # Capabilities
    location ^~ /hosting/capabilities {
        proxy_pass https://#{ DOCKER_IP }:9980;
        proxy_set_header Host $http_host;
    }

    # main websocket
    location ~ ^/cool/(.*)/ws$ {
        proxy_pass https://#{ DOCKER_IP }:9980;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 36000s;
    }

    # download, presentation and image upload
    location ~ ^/(c|l)ool {
        proxy_pass https://#{ DOCKER_IP }:9980;
        proxy_set_header Host $http_host;
    }

    # Admin Console websocket
    location ^~ /cool/adminws {
        proxy_pass https://#{ DOCKER_IP }:9980;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $http_host;
        proxy_read_timeout 36000s;
    }

    location / { return 404; }

    access_log /var/log/nginx/office-access.log;
    error_log /var/log/nginx/office-error.log;
}
EOF
  end

  nginx_conf_path = '/etc/nginx/sites-available/nextcloud'
  tmp_nginx_conf_path = "#{ nginx_conf_path }.tmp"
  File.write(tmp_nginx_conf_path, nginx_conf)

  if !File.exists?(nginx_conf_path) \
    || !FileUtils.compare_file(nginx_conf_path, tmp_nginx_conf_path) then
      File.rename(tmp_nginx_conf_path, nginx_conf_path)
      File.unlink('/etc/nginx/sites-enabled/nextcloud') rescue Errno::ENOENT
      File.symlink('../sites-available/nextcloud',
                   '/etc/nginx/sites-enabled/nextcloud')
      if reload_nginx then
        system('service', 'nginx', 'reload') \
          or raise('could not reload nginx configuration')
      end
  else
    File.unlink(tmp_nginx_conf_path)
  end
end

def write_config_file(data, name)
  path = File.join(CONFIG_DIR, name)
  tmp_path = "#{ path }.tmp"
  File.write(tmp_path, data)
  File.rename(tmp_path, path)
end

raise('not running as root') unless Process.uid == 0

begin
  $puavoconf_values = get_needed_puavoconf_values()
rescue StandardError => e
  warn("could not lookup puavoconf value: #{ e.message }")
  exit(1)
end

# Check hosttype to prevent some crazy accidents.
# This really does require a bootserver.
raise('hosttype is not bootserver') \
  unless $puavoconf_values['puavo.hosttype'] == 'bootserver'

reload_nginx = true
setup_nginx_only = false
if ARGV[0] == '--setup-nginx-only' then
  reload_nginx = false
  setup_nginx_only = true
end

status = 0

collabora_domain  = $puavoconf_values['puavo.collabora.domain']
nc_domains_list   = $puavoconf_values['puavo.nextcloud.domain'].split
primary_nc_domain = nc_domains_list.first

if $puavoconf_values['puavo.docker.collabora.enabled'] != 'true' then
  collabora_domain = nil
end

begin
  raise('no Nextcloud domains set') if nc_domains_list.empty?
  raise('no Collabora domain set') \
    if !collabora_domain.nil? && collabora_domain.empty?
rescue StandardError => e
  warn(e.message)
  exit(1)
end

begin
  setup_nginx_configuration(primary_nc_domain, nc_domains_list,
                            collabora_domain, reload_nginx)
rescue StandardError => e
  warn("could not configure nginx: #{ e.message }")
  exit(1)
end

exit(0) if setup_nginx_only == true

status = 1 unless cleanup_docker_images()

begin
  ldap_base = File.read('/etc/puavo/ldap/base').chomp
rescue StandardError => e
  warn("could not determine system ldap base: #{ e.message }")
  exit(1)
end

FileUtils.mkdir_p([ DOCKER_STATE_DIR, CERTS_DIR, CONFIG_DIR ])
FileUtils.mkdir_p(SECRETS_DIR, :mode => 0700)

puavo_ldap_password_path = File.join(SECRETS_DIR, 'puavo_ldap_password')
if not File.exists?(puavo_ldap_password_path) then
  warn(%Q[Will not install/setup Nextcloud,])
  warn(%Q["#{ puavo_ldap_password_path }" is missing.  You should write])
  warn(%Q[the password of "#{ ldap_agent_dn(ldap_base) }" to])
  warn(%Q["#{ puavo_ldap_password_path }".])
  exit(1)
end

File.chmod(0600, puavo_ldap_password_path)

current_versions = get_container_versions()

docker_compose = YAML::load_file(DOCKER_COMPOSE_TEMPLATE_PATH)

backup_before_docker_ops = true
startup_container_list = DEFAULT_CONTAINER_LIST
if ARGV[0] == '--no-backup' then
  ARGV.shift
  backup_before_docker_ops = false
  startup_container_list = ARGV unless ARGV.empty?
end

# Go through all containers here so that docker_compose file
# has correct configurations.
DEFAULT_CONTAINER_LIST.each do |container_name|
  begin
    puavoconf_var = "puavo.docker.#{ container_name }.version"
    image_version = $puavoconf_values[puavoconf_var]
    raise 'no image version set' if image_version.empty?

    if image_version != 'latest' \
      && current_versions.has_key?(container_name) then
        current = Gem::Version.new(current_versions[container_name])
        if Gem::Version.new(image_version) < Gem::Version.new(current) then
          raise("requested version (#{ image_version }) is older than" \
                  + " current running version (#{ current })")
        end
    end

    service_conf = docker_compose['services'][container_name]
    if service_conf['image'] then
      service_conf['image'] = "#{ IMAGEMAP[container_name] }:#{ image_version }"
    end
    if service_conf.dig('build', 'args', 'IMAGE') then
      service_conf['build']['args']['IMAGE'] \
        = "#{ IMAGEMAP[container_name] }:#{ image_version }"
      service_conf['image'] \
        = "puavo_#{ IMAGEMAP[container_name] }:#{ image_version }"
    end
  rescue StandardError => e
    warn("could not set #{ container_name }: #{ e.message }")
    exit(1)
  end
end

server_locale = nil
begin
  puavo_locale = $puavoconf_values['puavo.l10n.locale']
  server_location = puavo_locale[0..1]
  raise 'location not two letters' unless server_location.length == 2
  server_locale = server_location
  write_config_file("#{ server_location }\n", 'location_countrycode')
rescue StandardError => e
  warn("could not determine server location: #{ e.message }")
  FileUtils.rm_f(File.join(CONFIG_DIR, 'location_countrycode'))
end

begin
  puavo_hostname = File.read('/etc/puavo/hostname').chomp
  puavo_domain   = File.read('/etc/puavo/domain').chomp
  puavo_server_fqdn = "#{ puavo_hostname }.#{ puavo_domain }"
rescue StandardError => e
  warn("could not determine system ldap base: #{ e.message }")
  exit(1)
end

def get_nextcloud_trusted_proxies
  required_proxy_addresses \
    = Socket.getifaddrs.map do |iface|
        next unless iface.name.match(/^(inet|ltsp|wlan)\d+/) && iface.addr.ipv4?
        iface.addr.ip_address
      end.compact

  additional_trusted_proxies \
    = $puavoconf_values['puavo.nextcloud.trusted_proxies'].split(' ')

  required_proxy_addresses + additional_trusted_proxies
end

begin
  nextcloud_env = docker_compose['services']['nextcloud']['environment']
  nextcloud_env['NEXTCLOUD_TRUSTED_DOMAINS'] = nc_domains_list.join(' ')
  nextcloud_env['PUAVO_KERBEROS_REALM'] \
    = File.read('/etc/puavo/kerberos/realm').chomp
  nextcloud_env['PUAVO_LDAP_AGENT_DN'] = ldap_agent_dn(ldap_base)
  nextcloud_env['PUAVO_LDAP_BASE_DN'] = ldap_base
  nextcloud_env['PUAVO_SERVER_FQDN'] = puavo_server_fqdn
rescue StandardError => e
  warn("could not configure nextcloud for docker-compose: #{ e.message }")
  exit(1)
end

if collabora_domain then
  begin
    collabora_env = docker_compose['services']['collabora']['environment'] || {}
    collabora_env['server_name'] = collabora_domain
    collabora_env['aliasgroup1'] = "https://#{ primary_nc_domain }"
    docker_compose['services']['collabora']['environment'] = collabora_env
  rescue StandardError => e
    warn("could not configure collabora for docker-compose: #{ e.message }")
    exit(1)
  end
else
  docker_compose['services'].delete('collabora')
end

begin
  trusted_proxies = get_nextcloud_trusted_proxies().join(' ')
  write_config_file("#{ trusted_proxies }\n", 'trusted_proxies')
rescue StandardError => e
  warn("could not write trusted proxies configuration file: #{ e.message }")
  exit(1)
end

PASSWORDS_TO_GENERATE = %w(postgres_db_password nextcloud_admin_password)
PASSWORDS_TO_GENERATE.each do |password_name|
  password_path = File.join(SECRETS_DIR, password_name)
  unless File.exists?(password_path) then
    chars = ("a".."z").to_a + ("A".."Z").to_a + ("0".."9").to_a
    password = Array.new(32) { chars[rand(chars.size)] }.join
    tmp_password_path = "#{ password_path }.tmp"
    File.write(tmp_password_path, "#{ password }\n", 0, :perm => 0600)
    File.rename(tmp_password_path, password_path)
  end
  File.chmod(0600, password_path)
end

FileUtils.copy_file('/etc/krb5.conf',
                    File.join(CONFIG_DIR, 'krb5.conf'),
                    :preserve => true)

school_name = 'No school'
school_url  = 'https://puavo.org'

school_cn_list = []
begin
  puavoldap = PuavoLdap.new
  schools_served = puavoldap.filter_by_schools_served_by_this_server
  school_cn_list = schools_served.map { |s| Array(s.cn).first }.compact
  school_dn_list = schools_served.map { |s| s.dn }.compact
  school_names_list = schools_served.map { |s| Array(s.displayName).first } \
                                    .compact
  school_urls_list = schools_served.map do |s|
                       Array(s.puavoSchoolHomePageURL).first
                     end.compact

  if school_dn_list.empty? then
    # use "false" filter, nothing should match
    # https://www.ietf.org/rfc/rfc4526.txt
    apache_login_filter = '(|)'
    login_filter        = '(|)'
    user_filter         = '(|)'
  else
    school_name = school_names_list.join(' / ')
    potential_school_url = school_urls_list.first
    school_url = potential_school_url if potential_school_url

    objectclass_filter = Net::LDAP::Filter.eq('objectClass', 'posixAccount')
    # check that puavoLocked == FALSE or puavoLocked is missing
    puavolocked_filter = Net::LDAP::Filter.eq('puavoLocked', 'FALSE') \
                           | ~Net::LDAP::Filter.pres('puavoLocked')
    puavoschool_filters = \
      school_dn_list.map do |school_dn|
        Net::LDAP::Filter.eq('puavoSchool', Net::LDAP::Filter.escape(school_dn))
      end
    apache_login_filter = (objectclass_filter & puavolocked_filter \
                             & puavoschool_filters.reduce(:|)).to_s
    login_filter = (objectclass_filter & puavolocked_filter \
                      & puavoschool_filters.reduce(:|)      \
                      & Net::LDAP::Filter.eq('uid', '%uid')).to_s
    user_filter = (objectclass_filter & puavoschool_filters.reduce(:|)).to_s
  end

  # for some reason Apache does not like ldap filters in parenthesis
  apache_conf_filter = apache_login_filter.sub(/^\(/, '').sub(/\)$/, '')

  write_config_file("#{ apache_conf_filter }\n", 'apache_ldap_login_filter')
  write_config_file("#{ login_filter }\n",       'ldap_login_filter')
  write_config_file("#{ user_filter }\n",        'ldap_user_filter')
rescue StandardError => e
  warn("could not determine ldap user filter for this server: #{ e.message }")
  exit(1)
end

begin
  write_config_file("#{ school_name }\n", 'school_name')
rescue StandardError => e
  warn("could not write school_name: #{ e.message }")
  FileUtils.rm_f( File.join(CONFIG_DIR, 'school_name') )
  exit(1)
end

begin
  write_config_file("#{ school_url }\n", 'school_url')
rescue StandardError => e
  warn("could not write school_url: #{ e.message }")
  FileUtils.rm_f( File.join(CONFIG_DIR, 'school_url') )
  exit(1)
end

begin
  if school_cn_list.empty? then
    FileUtils.rm_f(File.join(CONFIG_DIR, 'sharedir_root'))
  else
    sharedir_base = PuavoSharedDirectories.dirname('base', server_locale)
    raise "no sharedir base known for locale #{ server_locale }" \
      unless sharedir_base
    if school_cn_list.count == 1 then
      sharedir_root = File.join(sharedir_base, school_cn_list.first)
    else
      sharedir_root = sharedir_base
    end
    write_config_file("#{ sharedir_root }\n", 'sharedir_root')
  end
rescue StandardError => e
  warn("could not determine sharedir root: #{ e.message }")
  FileUtils.rm_f(File.join(CONFIG_DIR, 'sharedir_root'))
end

collabora_enabled = false
office_domain_path = File.join(CONFIG_DIR, 'office_domain')
if $puavoconf_values['puavo.docker.collabora.enabled'] == 'true' \
  && !collabora_domain.empty? then
    tmp_office_domain_path = "#{ office_domain_path }.tmp"
    File.write(tmp_office_domain_path, "#{ collabora_domain }\n")
    File.rename(tmp_office_domain_path, office_domain_path)
else
  File.unlink(office_domain_path) rescue Errno::ENOENT
end

tmpfile = "#{ DOCKER_COMPOSE_PATH }.tmp"
File.write(tmpfile, docker_compose.to_yaml)
File.rename(tmpfile, DOCKER_COMPOSE_PATH)

begin
  nextcloud_keytab_path = File.join(SECRETS_DIR, 'nextcloud_keytab')
  unless File.exists?(nextcloud_keytab_path) then
    FileUtils.rm_f("#{ nextcloud_keytab_path }.tmp")
    system('kadmin.local', '-q',
           "ktadd -norandkey -k #{ nextcloud_keytab_path }.tmp HTTP/#{ primary_nc_domain }")
    File.rename("#{ nextcloud_keytab_path }.tmp", nextcloud_keytab_path)
  end
  FileUtils.chmod(0600, nextcloud_keytab_path)
rescue StandardError => e
  warn("could not write #{ nextcloud_keytab_path }: #{ e.message }")
  warn("perhaps HTTP/#{ primary_nc_domain } principal does not exist?")
  exit(1)
end

if backup_before_docker_ops then
  if !system('/usr/local/sbin/puavo-backup-docker') then
    warn('could not backup docker state before installing/updating')
    exit(1)
  end
end

startup_container_list.each do |container_name|
  puavoconf_var = "puavo.docker.#{ container_name }.enabled"
  if $puavoconf_values[puavoconf_var] == 'true' then
    puts("> starting up container #{ container_name }")
    unless system('docker-compose', '--file', DOCKER_COMPOSE_PATH,
                    '--project-name', 'puavo', 'up', '-d',
                    container_name) then
      warn("error in starting up #{ container_name }")
      status = 1
    end
    next
  end

  next unless container_exists?(container_name)

  puts("> removing container #{ container_name }")
  unless system('docker', 'container', 'stop', container_name,
                          :out => File::NULL, :err => File::NULL) then
    warn("error in stopping container #{ container_name }")
    status = 1
    next
  end

  unless system('docker', 'container', 'rm', container_name,
                          :out => File::NULL, :err => File::NULL) then
    warn("error in removing container #{ container_name }")
    status = 1
  end
end

status = 1 unless cleanup_docker_images()

exit(status)
