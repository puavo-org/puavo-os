#!/bin/sh

set -eu

. /etc/puavo-conf/scripts/.lib

get_etc_puavo() {
  etc_puavo_data=$(cat "$1" 2>/dev/null) || true
  if [ -z "$etc_puavo_data" ]; then
    echo "Could not read data from $1" >&2
    return 1
  fi

  echo "$etc_puavo_data"
}

puavo_domain=$(           get_etc_puavo /etc/puavo/domain           )
puavo_hostname=$(         get_etc_puavo /etc/puavo/hostname         )
puavo_kerberos_realm=$(   get_etc_puavo /etc/puavo/kerberos/realm   )
puavo_kerberos_toprealm=$(get_etc_puavo /etc/puavo/kerberos/toprealm)
puavo_ldap_base=$(        get_etc_puavo /etc/puavo/ldap/base        )
puavo_ldap_master=$(      get_etc_puavo /etc/puavo/ldap/master      )
puavo_topdomain=$(        get_etc_puavo /etc/puavo/topdomain        )

subdomain_names() {
  host=$1
  shift
  echo -n " ${host}.${puavo_domain}"
  for subdomain in "$@"; do
    echo -n " ${host}.${subdomain}.${puavo_domain}"
  done
  echo -n " $host"
}

# XXX get rid of hosttype handling
if [ "$(puavo-conf puavo.hosttype)" != 'bootserver' ]; then
  exit 0
fi

# XXX this should not be hardcoded to 10.XXX addresses!
arpazone='10.in-addr.arpa'

dhcpd_interfaces=$(sed -n -E '/^INTERFACESv4/s/^INTERFACESv4="(.*)"$/\1/p' \
                       /etc/default/isc-dhcp-server)
if [ -z "$dhcpd_interfaces" ]; then
  echo 'No dhcpd interfaces set for a bootserver, exiting...' >&2
  exit 1
fi

dhcpd_subdomain_list=''
for interf in $dhcpd_interfaces; do
  interf_subdomain="$(echo "$interf" | sed -E 's/[0-9]+$//')"
  dhcpd_subdomain_list="${dhcpd_subdomain_list} ${interf_subdomain}"
done
dhcpd_subdomain_list=$(echo "$dhcpd_subdomain_list" | xargs -n 1 | sort | uniq)

dhcpd_ip_list=''
for interf in $dhcpd_interfaces; do
  dhcpd_ip_list="${dhcpd_ip_list} $(lookup_ip "$interf")"
done

first_dhcpd_ip=$(echo "$dhcpd_ip_list" | awk '{ print $1; exit(0) }')
if [ -z "$first_dhcpd_ip" ]; then
  echo 'No internal network addresses defined for bootserver, exiting...' >&2
  exit 1
fi

if [ ! -e /var/lib/bind/puavo_domain ]; then
  install -o bind -g bind -m 644 /dev/null /var/lib/bind/puavo_domain.tmp
  cat <<EOF > /var/lib/bind/puavo_domain.tmp
\$ORIGIN .
\$TTL 0          ; no TTL
${puavo_domain}         IN SOA  ns1.${puavo_domain}. 20101209. (
                                2010088447 ; serial
                                28800      ; refresh (8 hours)
                                3600       ; retry (1 hour)
                                604800     ; expire (1 week)
                                38400      ; minimum (10 hours 40 minutes)
                                )
                        NS      ns1.${puavo_domain}.
\$ORIGIN ${puavo_domain}.
ns1                     A       ${first_dhcpd_ip}
EOF
  mv /var/lib/bind/puavo_domain.tmp /var/lib/bind/puavo_domain
fi

if [ ! -e /var/lib/bind/puavo_domain_reverse ]; then
  install -o bind -g bind -m 644 /dev/null \
         /var/lib/bind/puavo_domain_reverse.tmp
  cat <<EOF > /var/lib/bind/puavo_domain_reverse.tmp
\$ORIGIN .
\$TTL 0          ; no TTL
${arpazone}             IN SOA  ${puavo_domain}. root.${puavo_domain}. (
                                2010088664 ; serial
                                604800     ; refresh (1 week)
                                86400      ; retry (1 day)
                                2419200    ; expire (4 weeks)
                                604800     ; minimum (1 week)
                                )
                        NS      ${puavo_domain}.
\$ORIGIN .
EOF
  mv /var/lib/bind/puavo_domain_reverse.tmp /var/lib/bind/puavo_domain_reverse
fi

# Create nsupdate.key for ddns-updates.  We do create a new one for every
# boot, because this is only used internally for this server.  In case this
# ever changes later, the key should be put under /state and the old one
# should not be overwritten.
mkdir -m 750 -p /etc/dhcp/ddns-keys
install -o root -g root -m 640 /dev/null /etc/dhcp/ddns-keys/nsupdate.key.tmp
ddns-confgen -a hmac-md5 -q > /etc/dhcp/ddns-keys/nsupdate.key.tmp
mv /etc/dhcp/ddns-keys/nsupdate.key.tmp /etc/dhcp/ddns-keys/nsupdate.key

install -o root -g bind -m 640 /etc/dhcp/ddns-keys/nsupdate.key \
                               /etc/bind/nsupdate.key

install -o root -g bind -m 644 /dev/null /etc/bind/named.conf.local.tmp
cat <<EOF > /etc/bind/named.conf.local.tmp
//
// Do any local configuration here
//

// Consider adding the 1918 zones here, if they are not used in your
// organization
//include "/etc/bind/zones.rfc1918";

include "/etc/bind/nsupdate.key";

zone "${puavo_domain}" {
        type master;
        file "/var/lib/bind/puavo_domain";
        update-policy {
                grant ddns-key zonesub ANY;
        };
};

zone "${arpazone}" {
        type master;
        file "/var/lib/bind/puavo_domain_reverse";
        update-policy {
                grant ddns-key zonesub ANY;
        };
};
EOF
mv /etc/bind/named.conf.local.tmp \
   /etc/bind/named.conf.local

puavo_cert_version_list=$(puavo-conf puavo.admin.certs.versions)
puavo_api_server_port=444
puavo_imageserver_port=873

if win_ip="$(lookup_ip win0)"; then
  win_domain="ad.${puavo_hostname}.${puavo_domain}"
  win_etc_dnsmasq_conf="server=/${win_domain}/${win_ip}#53"
else
  win_etc_dnsmasq_conf=''
fi

cat <<EOF > /etc/dnsmasq.conf.tmp
domain=${puavo_domain}
domain-needed
cache-size=10000
dns-forward-max=1000
localise-queries
log-facility=/var/log/dnsmasq.log
bind-interfaces
interface=lo
$(for interf in $dhcpd_interfaces; do
    echo "interface=${interf}"
  done)

${win_etc_dnsmasq_conf}

# Forward requests to upstream. Requests to puavo domain should be
# sent to bind that handles DDNS requests
$(for subdomain in $dhcpd_subdomain_list; do
    echo "server=/${subdomain}.${puavo_domain}/127.0.0.1#553"
  done)
# XXX hardcoded 249.10 and 251.10 ... breaks with other network configurations...
server=/249.10.in-addr.arpa/127.0.0.1#553
server=/251.10.in-addr.arpa/127.0.0.1#553

# Printer entries
server=/_ipp._tcp.${puavo_domain}/127.0.0.1#553

txt-record=_kerberos,"${puavo_kerberos_realm}"
txt-record=_kerberos.${puavo_domain},"${puavo_kerberos_realm}"
txt-record=_kerberos,"${puavo_kerberos_toprealm}"
txt-record=_kerberos.${puavo_topdomain},"${puavo_kerberos_toprealm}"
txt-record=_ldap_base.${puavo_domain},"${puavo_ldap_base}"
txt-record=_puavo,"${puavo_domain}"
txt-record=_puavo.${puavo_domain},"${puavo_domain}"
$(for subdomain in $dhcpd_subdomain_list; do
    echo "txt-record=_puavo.${subdomain}.${puavo_domain},\"${puavo_domain}\""
  done)

srv-host=_imageserver._tcp.${puavo_domain},"${puavo_hostname}.${puavo_domain}",872
srv-host=_kerberos-adm._tcp.${puavo_domain},"kerberos.${puavo_domain}",749
srv-host=_kerberos-master._tcp.${puavo_domain},"kerberos.${puavo_domain}",88
srv-host=_kerberos-master._udp.${puavo_domain},"kerberos.${puavo_domain}",88
srv-host=_kerberos._tcp.${puavo_kerberos_realm},"kerberos.${puavo_domain}",88
srv-host=_kerberos._tcp.${puavo_kerberos_toprealm},"kerberos.${puavo_topdomain}",88
srv-host=_kerberos._udp.${puavo_kerberos_realm},"kerberos.${puavo_domain}",88
srv-host=_kerberos._udp.${puavo_kerberos_toprealm},"kerberos.${puavo_topdomain}",88
srv-host=_kpasswd._udp.${puavo_domain},"kerberos.${puavo_domain}",464
srv-host=_ldap_master._tcp.${puavo_domain},${puavo_ldap_master},389
srv-host=_ldap._tcp.${puavo_domain},${puavo_hostname}.${puavo_domain},389
srv-host=_puavo._tcp.${puavo_domain},"${puavo_domain}",80
srv-host=_sambaserver._tcp.${puavo_domain},"${puavo_hostname}.${puavo_domain}",139
srv-host=_sambaserver._tcp.${puavo_domain},"${puavo_hostname}.${puavo_domain}",445
srv-host=_sambaserver._udp.${puavo_domain},"${puavo_hostname}.${puavo_domain}",137
srv-host=_sambaserver._udp.${puavo_domain},"${puavo_hostname}.${puavo_domain}",138

$(for subdomain in $dhcpd_subdomain_list; do
    echo "srv-host=_puavo._tcp.${subdomain}.${puavo_domain},\"${puavo_domain}\",80"
  done)
srv-host=_puavo-api._tcp.${puavo_domain},"${puavo_hostname}.${puavo_domain}",443

$(for puavo_cert_version in $puavo_cert_version_list; do
    # this logic must match the logic in setup_nginx
    [ "$puavo_cert_version" = '20101001' ] && continue
    echo "srv-host=_imageserver_${puavo_cert_version}._tcp.${puavo_domain},\"${puavo_hostname}.${puavo_domain}\",${puavo_imageserver_port}"
    echo "srv-host=_puavo-api_${puavo_cert_version}._tcp.${puavo_domain},\"${puavo_hostname}.${puavo_domain}\",${puavo_api_server_port}"
    puavo_api_server_port=$(($puavo_api_server_port + 1))
    puavo_imageserver_port=$(($puavo_imageserver_port + 1))
  done)

# DNS entries needed for AirPrint printing
ptr-record=b._dns-sd._udp,${puavo_domain}
ptr-record=b._dns-sd._udp.${puavo_domain},${puavo_domain}
ptr-record=lb._dns-sd._udp,${puavo_domain}
ptr-record=lb._dns-sd._udp.${puavo_domain},${puavo_domain}
$(for subdomain in $dhcpd_subdomain_list; do
    echo "ptr-record=b._dns-sd._udp.${subdomain}.${puavo_domain},${puavo_domain}"
    echo "ptr-record=lb._dns-sd._udp.${subdomain}.${puavo_domain},${puavo_domain}"
  done)
EOF
mv /etc/dnsmasq.conf.tmp /etc/dnsmasq.conf

# Setup /etc/hosts
{
  cat <<EOF
127.0.0.1       localhost

$(for dhcp_ip in $dhcpd_ip_list; do
    # XXX should we try to cut down this list of subdomains some day... ?
    echo "${dhcp_ip}	${puavo_hostname}.${puavo_domain} ${puavo_hostname}$(for hostalias in cups eventlog homedir kerberos ntp printserver syslog wlangw; do subdomain_names "$hostalias" $dhcpd_subdomain_list; done)"
  done)

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost   ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
  if [ -s /state/etc/hosts ]; then
    echo
    echo '# from /state/etc/hosts:'
    cat /state/etc/hosts
  fi
} >> /etc/hosts.tmp
mv /etc/hosts.tmp /etc/hosts

cat <<EOF > /etc/resolvconf/resolv.conf.d/tail.tmp
search ltsp.${puavo_domain} wlan.${puavo_domain}
EOF
mv /etc/resolvconf/resolv.conf.d/tail.tmp /etc/resolvconf/resolv.conf.d/tail

#
# settings that are customizable with puavo-conf
#

log_policy=$(puavo-conf puavo.admin.logging.dnsmasq)

case "$log_policy" in
  log-queries)
    cat <<'EOF' > /etc/dnsmasq.d/05-log-queries.tmp
log-queries
EOF
    mv /etc/dnsmasq.d/05-log-queries.tmp \
       /etc/dnsmasq.d/05-log-queries
    ;;
  '')
    rm -f /etc/dnsmasq.d/05-log-queries
    ;;
  *)
    rm -f /etc/dnsmasq.d/05-log-queries
    echo "Unsupported value in puavo.admin.logging.dnsmasq: '${log_policy}'" >&2
    exit 1
    ;;
esac
